Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    CLOSE_BRACKET
    OP_LESS_EQUAL_GREATER
    TERNARY
    OPEN
    DOT
    COMMENT
    FORMAT
    OPEN_BRACKET
    TILDA
    FUNCTION
    CHDIR
    UNLESS
    WRITE
    BACKSLASH
    STR_OP
    CLOSE
    WHITESPACE
    EACH

Grammar

Rule 0     S' -> start
Rule 1     start -> segments
Rule 2     segments -> statements_subroutine segments
Rule 3     segments -> statements_subroutine M_segments
Rule 4     statements_subroutine -> statements
Rule 5     statements_subroutine -> subroutine
Rule 6     M_segments -> epsilon
Rule 7     block -> BLOCK_BEGIN statements BLOCK_END
Rule 8     statements -> statement statements
Rule 9     statements -> statement M_STATEMENTS
Rule 10    statement -> assignment M_QUAD
Rule 11    statement -> declaration M_QUAD
Rule 12    statement -> function_call M_QUAD
Rule 13    statement -> break M_QUAD
Rule 14    statement -> continue M_QUAD
Rule 15    statement -> print M_QUAD
Rule 16    statement -> return M_QUAD
Rule 17    statement -> die M_QUAD
Rule 18    statement -> chomp M_QUAD
Rule 19    statement -> expression M_QUAD SEMICOLON
Rule 20    statement -> use M_QUAD
Rule 21    statement -> while_statement M_QUAD
Rule 22    statement -> do_while_statement M_QUAD
Rule 23    statement -> for_statement M_QUAD
Rule 24    statement -> switch_statement M_QUAD
Rule 25    statement -> if_statement M_QUAD
Rule 26    statement -> ifelse_statement M_QUAD
Rule 27    use -> USE STRICT SEMICOLON
Rule 28    use -> USE WARNINGS SEMICOLON
Rule 29    block_or_statement -> block
Rule 30    block_or_statement -> statement
Rule 31    block_or_statement -> SEMICOLON
Rule 32    if_statement -> IF expression RPAR M_if block_or_statement
Rule 33    M_if -> epsilon
Rule 34    ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
Rule 35    elsif_statement -> IF expression RPAR M_if block_or_statement elsif_statements ELSE M_else block_or_statement
Rule 36    elsif_statements -> M_elsif ELSIF expression RPAR block_or_statement M_elsif elsif_statements
Rule 37    elsif_statements -> M_elsif ELSIF expression RPAR block_or_statement
Rule 38    M_elsif -> epsilon
Rule 39    M_else -> epsilon
Rule 40    while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
Rule 41    M_whileBranch -> epsilon
Rule 42    M_for -> epsilon
Rule 43    do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
Rule 44    for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
Rule 45    for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
Rule 46    multi_expression -> expression expressionlist
Rule 47    expressionlist -> COMMA expression expressionlist
Rule 48    expressionlist -> epsilon
Rule 49    multi_assignment -> SCALAR_VARIABLE ASSIGNMENT expression assignmentlist
Rule 50    multi_assignment -> SEMICOLON
Rule 51    assignmentlist -> COMMA SCALAR_VARIABLE ASSIGNMENT expression assignmentlist
Rule 52    assignmentlist -> SEMICOLON
Rule 53    keys_or_values -> KEYS
Rule 54    keys_or_values -> VALUES
Rule 55    statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
Rule 56    statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
Rule 57    statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
Rule 58    statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
Rule 59    switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
Rule 60    cases -> case_block M_QUAD cases
Rule 61    cases -> case_block M_QUAD
Rule 62    cases -> ELSE block M_QUAD
Rule 63    case_block -> CASE switch_expression M_switch block
Rule 64    switch_expression -> expression
Rule 65    M_switch -> epsilon
Rule 66    assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
Rule 67    assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
Rule 68    assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
Rule 69    assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
Rule 70    assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
Rule 71    assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
Rule 72    assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
Rule 73    assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
Rule 74    assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
Rule 75    assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
Rule 76    assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
Rule 77    assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
Rule 78    assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
Rule 79    assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
Rule 80    assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
Rule 81    array -> ARRAY_VARIABLE
Rule 82    array -> LPAR arrayList RPAR
Rule 83    arrayList -> array_expression COMMA arrayList
Rule 84    arrayList -> array_expression
Rule 85    array_expression -> expression
Rule 86    arrayList -> epsilon
Rule 87    hashList -> expression COMMA expression COMMA hashList
Rule 88    hashList -> expression COMMA expression
Rule 89    declaration -> MY SCALAR_VARIABLE SEMICOLON
Rule 90    declaration -> MY ARRAY_VARIABLE SEMICOLON
Rule 91    function_call -> function_name LPAR argumentList RPAR SEMICOLON
Rule 92    function_name -> IDENTIFIER
Rule 93    argumentList -> epsilon
Rule 94    argumentList -> expression arguments
Rule 95    arguments -> COMMA expression arguments
Rule 96    arguments -> epsilon
Rule 97    return -> RETURN expression SEMICOLON
Rule 98    break -> BREAK SEMICOLON
Rule 99    continue -> CONTINUE SEMICOLON
Rule 100   chomp -> CHOMP expression SEMICOLON
Rule 101   subroutine -> SUB marker identifier M_sub block marker1
Rule 102   M_sub -> epsilon
Rule 103   identifier -> IDENTIFIER
Rule 104   marker -> epsilon
Rule 105   marker1 -> epsilon
Rule 106   print -> PRINT printlist SEMICOLON
Rule 107   die -> DIE printlist SEMICOLON
Rule 108   printlist -> expression
Rule 109   expression -> MINUS expression
Rule 110   expression -> INCREAMENT expression
Rule 111   expression -> expression INCREAMENT
Rule 112   expression -> DCREAMENT expression
Rule 113   expression -> expression DCREAMENT
Rule 114   expression -> expression PLUS expression
Rule 115   expression -> expression MINUS expression
Rule 116   expression -> expression MULTIPLY expression
Rule 117   expression -> expression DIVIDE expression
Rule 118   expression -> expression MODULUS expression
Rule 119   expression -> expression EXPONENT expression
Rule 120   expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression
Rule 121   M_QMARK -> epsilon
Rule 122   M_COLON -> epsilon
Rule 123   expression -> expression OP_GREATER_THAN expression
Rule 124   expression -> expression OP_GREATER_THAN_E expression
Rule 125   expression -> expression OP_LESS_THAN expression
Rule 126   expression -> expression OP_LESS_THAN_E expression
Rule 127   expression -> expression EQUAL expression
Rule 128   expression -> expression NOT_EQUAL expression
Rule 129   expression -> expression STRING_CMP expression
Rule 130   expression -> expression AND expression
Rule 131   expression -> expression OR expression
Rule 132   expression -> NOT expression
Rule 133   expression -> LPAR expression RPAR
Rule 134   expression -> SCALAR_VARIABLE
Rule 135   expression -> constant
Rule 136   constant -> INTEGER
Rule 137   constant -> FLOAT
Rule 138   constant -> HEXADECIMAL
Rule 139   constant -> OCTAL
Rule 140   constant -> BINARY
Rule 141   constant -> EXPONANTIAL
Rule 142   constant -> STRING
Rule 143   constant -> PSEUDO_STRING
Rule 144   expression -> INPUT
Rule 145   M_QUAD -> epsilon
Rule 146   M_STATEMENTS -> epsilon
Rule 147   epsilon -> <empty>

Terminals, with rules where they appear

AND                  : 130
ARRAY_VARIABLE       : 55 66 67 68 69 76 78 79 80 81 90
ASSIGNMENT           : 49 51 66 67 68 69 70 71 72 73 74 76 77 78 79 80
BACKSLASH            : 
BINARY               : 140
BLOCK_BEGIN          : 7 59
BLOCK_END            : 7 59
BREAK                : 98
CASE                 : 63
CHDIR                : 
CHOMP                : 100
CLOSE                : 
CLOSE_BRACKET        : 
COLON                : 120
COMMA                : 47 51 83 87 87 88 95
COMMENT              : 
CONTINUE             : 99
DCREAMENT            : 112 113
DIE                  : 107
DIVIDE               : 117
DO                   : 43
DOT                  : 
DOUBLE_DOT           : 58 67 80
EACH                 : 
ELSE                 : 34 35 62
ELSIF                : 36 37
EQUAL                : 127
EXPONANTIAL          : 141
EXPONENT             : 119
FLOAT                : 137
FOR                  : 44 45
FOREACH              : 55 56 57 58
FORMAT               : 
FUNCTION             : 
HASH_VARIABLE        : 56 57 68 69 71 77 78 79
HEXADECIMAL          : 138
IDENTIFIER           : 92 103
IF                   : 32 34 35
INCREAMENT           : 110 111
INPUT                : 144
INTEGER              : 58 58 67 67 80 80 136
KEYS                 : 53 68 78
LPAR                 : 40 43 44 45 55 56 57 58 59 67 71 77 80 82 91 133
MINUS                : 109 115
MODULUS              : 118
MULTIPLY             : 116
MY                   : 66 67 68 69 70 71 72 89 90
NOT                  : 132
NOT_EQUAL            : 128
OCTAL                : 139
OPEN                 : 
OPEN_BRACKET         : 
OP_GREATER_THAN      : 123
OP_GREATER_THAN_E    : 124
OP_LESS_EQUAL_GREATER : 
OP_LESS_THAN         : 125
OP_LESS_THAN_E       : 126
OR                   : 131
PLUS                 : 114
PRINT                : 106
PSEUDO_STRING        : 143
Q_MARK               : 120
RETURN               : 97
RPAR                 : 32 34 35 36 37 40 43 44 45 55 56 57 58 59 67 71 77 80 82 91 133
SCALAR_VARIABLE      : 49 51 55 56 57 59 70 72 73 74 75 89 134
SEMICOLON            : 19 27 28 31 43 44 45 45 50 52 57 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 89 90 91 97 98 99 100 106 107
SIMULT_ASSIGNMENT    : 75
STRICT               : 27
STRING               : 142
STRING_CMP           : 129
STR_OP               : 
SUB                  : 101
SWITCH               : 59
TERNARY              : 
TILDA                : 
UNLESS               : 
USE                  : 27 28
VALUES               : 54 69 79
WARNINGS             : 28
WHILE                : 40 43
WHITESPACE           : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

M_COLON              : 120
M_QMARK              : 120
M_QUAD               : 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 40 43 44 45 60 61 62
M_STATEMENTS         : 9
M_else               : 34 35
M_elsif              : 36 36 37
M_for                : 44 45
M_if                 : 32 34 35
M_segments           : 3
M_sub                : 101
M_switch             : 63
M_whileBranch        : 40 43
argumentList         : 91
arguments            : 94 95
array                : 66 76
arrayList            : 82 83
array_expression     : 83 84
assignment           : 10 44 45
assignmentlist       : 49 51
block                : 29 43 62 63 101
block_or_statement   : 32 34 34 35 35 36 37 40 44 55 56 58
break                : 13
case_block           : 60 61
cases                : 59 60
chomp                : 18
constant             : 135
continue             : 14
declaration          : 11
die                  : 17
do_while_statement   : 22
elsif_statement      : 
elsif_statements     : 35 36
epsilon              : 6 33 38 39 41 42 48 65 86 93 96 102 104 105 121 122 145 146
expression           : 19 32 34 35 36 37 40 43 44 44 45 45 46 47 49 51 64 70 73 85 87 87 88 88 94 95 97 100 108 109 110 111 112 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 120 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 133
expressionlist       : 46 47
for_statement        : 23
function_call        : 12 72 74 75
function_name        : 91
hashList             : 71 77 87
identifier           : 101
if_statement         : 25
ifelse_statement     : 26
keys_or_values       : 56 57
marker               : 101
marker1              : 101
multi_assignment     : 
multi_expression     : 
print                : 15
printlist            : 106 107
return               : 16
segments             : 1 2
start                : 0
statement            : 8 9 30
statements           : 4 7 8
statements_subroutine : 2 3
subroutine           : 5
switch_expression    : 63
switch_statement     : 24
use                  : 20
while_statement      : 21

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . segments
    (2) segments -> . statements_subroutine segments
    (3) segments -> . statements_subroutine M_segments
    (4) statements_subroutine -> . statements
    (5) statements_subroutine -> . subroutine
    (8) statements -> . statement statements
    (9) statements -> . statement M_STATEMENTS
    (101) subroutine -> . SUB marker identifier M_sub block marker1
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SUB             shift and go to state 34
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    statements                     shift and go to state 33
    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    segments                       shift and go to state 3
    start                          shift and go to state 40
    while_statement                shift and go to state 5
    statement                      shift and go to state 42
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    subroutine                     shift and go to state 47
    die                            shift and go to state 12
    continue                       shift and go to state 21
    statements_subroutine          shift and go to state 32
    expression                     shift and go to state 57

state 1

    (133) expression -> LPAR . expression RPAR
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 60

state 2

    (109) expression -> MINUS . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 61

state 3

    (1) start -> segments .

    $end            reduce using rule 1 (start -> segments .)


state 4

    (112) expression -> DCREAMENT . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 62

state 5

    (21) statement -> while_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 64

state 6

    (23) statement -> for_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 65

state 7

    (16) statement -> return . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 66

state 8

    (13) statement -> break . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 67

state 9

    (55) statement -> FOREACH . SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> FOREACH . SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> FOREACH . SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> FOREACH . LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement

    SCALAR_VARIABLE shift and go to state 69
    LPAR            shift and go to state 68


state 10

    (139) constant -> OCTAL .

    INCREAMENT      reduce using rule 139 (constant -> OCTAL .)
    DCREAMENT       reduce using rule 139 (constant -> OCTAL .)
    PLUS            reduce using rule 139 (constant -> OCTAL .)
    MINUS           reduce using rule 139 (constant -> OCTAL .)
    MULTIPLY        reduce using rule 139 (constant -> OCTAL .)
    DIVIDE          reduce using rule 139 (constant -> OCTAL .)
    MODULUS         reduce using rule 139 (constant -> OCTAL .)
    EXPONENT        reduce using rule 139 (constant -> OCTAL .)
    Q_MARK          reduce using rule 139 (constant -> OCTAL .)
    OP_GREATER_THAN reduce using rule 139 (constant -> OCTAL .)
    OP_GREATER_THAN_E reduce using rule 139 (constant -> OCTAL .)
    OP_LESS_THAN    reduce using rule 139 (constant -> OCTAL .)
    OP_LESS_THAN_E  reduce using rule 139 (constant -> OCTAL .)
    EQUAL           reduce using rule 139 (constant -> OCTAL .)
    NOT_EQUAL       reduce using rule 139 (constant -> OCTAL .)
    STRING_CMP      reduce using rule 139 (constant -> OCTAL .)
    AND             reduce using rule 139 (constant -> OCTAL .)
    OR              reduce using rule 139 (constant -> OCTAL .)
    SEMICOLON       reduce using rule 139 (constant -> OCTAL .)
    RPAR            reduce using rule 139 (constant -> OCTAL .)
    COMMA           reduce using rule 139 (constant -> OCTAL .)
    COLON           reduce using rule 139 (constant -> OCTAL .)
    BLOCK_BEGIN     reduce using rule 139 (constant -> OCTAL .)


state 11

    (140) constant -> BINARY .

    INCREAMENT      reduce using rule 140 (constant -> BINARY .)
    DCREAMENT       reduce using rule 140 (constant -> BINARY .)
    PLUS            reduce using rule 140 (constant -> BINARY .)
    MINUS           reduce using rule 140 (constant -> BINARY .)
    MULTIPLY        reduce using rule 140 (constant -> BINARY .)
    DIVIDE          reduce using rule 140 (constant -> BINARY .)
    MODULUS         reduce using rule 140 (constant -> BINARY .)
    EXPONENT        reduce using rule 140 (constant -> BINARY .)
    Q_MARK          reduce using rule 140 (constant -> BINARY .)
    OP_GREATER_THAN reduce using rule 140 (constant -> BINARY .)
    OP_GREATER_THAN_E reduce using rule 140 (constant -> BINARY .)
    OP_LESS_THAN    reduce using rule 140 (constant -> BINARY .)
    OP_LESS_THAN_E  reduce using rule 140 (constant -> BINARY .)
    EQUAL           reduce using rule 140 (constant -> BINARY .)
    NOT_EQUAL       reduce using rule 140 (constant -> BINARY .)
    STRING_CMP      reduce using rule 140 (constant -> BINARY .)
    AND             reduce using rule 140 (constant -> BINARY .)
    OR              reduce using rule 140 (constant -> BINARY .)
    SEMICOLON       reduce using rule 140 (constant -> BINARY .)
    RPAR            reduce using rule 140 (constant -> BINARY .)
    COMMA           reduce using rule 140 (constant -> BINARY .)
    COLON           reduce using rule 140 (constant -> BINARY .)
    BLOCK_BEGIN     reduce using rule 140 (constant -> BINARY .)


state 12

    (17) statement -> die . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    M_QUAD                         shift and go to state 70
    epsilon                        shift and go to state 63

state 13

    (97) return -> RETURN . expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 71

state 14

    (12) statement -> function_call . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 72

state 15

    (106) print -> PRINT . printlist SEMICOLON
    (108) printlist -> . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    expression                     shift and go to state 74
    constant                       shift and go to state 51
    printlist                      shift and go to state 73

state 16

    (138) constant -> HEXADECIMAL .

    INCREAMENT      reduce using rule 138 (constant -> HEXADECIMAL .)
    DCREAMENT       reduce using rule 138 (constant -> HEXADECIMAL .)
    PLUS            reduce using rule 138 (constant -> HEXADECIMAL .)
    MINUS           reduce using rule 138 (constant -> HEXADECIMAL .)
    MULTIPLY        reduce using rule 138 (constant -> HEXADECIMAL .)
    DIVIDE          reduce using rule 138 (constant -> HEXADECIMAL .)
    MODULUS         reduce using rule 138 (constant -> HEXADECIMAL .)
    EXPONENT        reduce using rule 138 (constant -> HEXADECIMAL .)
    Q_MARK          reduce using rule 138 (constant -> HEXADECIMAL .)
    OP_GREATER_THAN reduce using rule 138 (constant -> HEXADECIMAL .)
    OP_GREATER_THAN_E reduce using rule 138 (constant -> HEXADECIMAL .)
    OP_LESS_THAN    reduce using rule 138 (constant -> HEXADECIMAL .)
    OP_LESS_THAN_E  reduce using rule 138 (constant -> HEXADECIMAL .)
    EQUAL           reduce using rule 138 (constant -> HEXADECIMAL .)
    NOT_EQUAL       reduce using rule 138 (constant -> HEXADECIMAL .)
    STRING_CMP      reduce using rule 138 (constant -> HEXADECIMAL .)
    AND             reduce using rule 138 (constant -> HEXADECIMAL .)
    OR              reduce using rule 138 (constant -> HEXADECIMAL .)
    SEMICOLON       reduce using rule 138 (constant -> HEXADECIMAL .)
    RPAR            reduce using rule 138 (constant -> HEXADECIMAL .)
    COMMA           reduce using rule 138 (constant -> HEXADECIMAL .)
    COLON           reduce using rule 138 (constant -> HEXADECIMAL .)
    BLOCK_BEGIN     reduce using rule 138 (constant -> HEXADECIMAL .)


state 17

    (24) statement -> switch_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 75

state 18

    (22) statement -> do_while_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 76

state 19

    (26) statement -> ifelse_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 77

state 20

    (141) constant -> EXPONANTIAL .

    INCREAMENT      reduce using rule 141 (constant -> EXPONANTIAL .)
    DCREAMENT       reduce using rule 141 (constant -> EXPONANTIAL .)
    PLUS            reduce using rule 141 (constant -> EXPONANTIAL .)
    MINUS           reduce using rule 141 (constant -> EXPONANTIAL .)
    MULTIPLY        reduce using rule 141 (constant -> EXPONANTIAL .)
    DIVIDE          reduce using rule 141 (constant -> EXPONANTIAL .)
    MODULUS         reduce using rule 141 (constant -> EXPONANTIAL .)
    EXPONENT        reduce using rule 141 (constant -> EXPONANTIAL .)
    Q_MARK          reduce using rule 141 (constant -> EXPONANTIAL .)
    OP_GREATER_THAN reduce using rule 141 (constant -> EXPONANTIAL .)
    OP_GREATER_THAN_E reduce using rule 141 (constant -> EXPONANTIAL .)
    OP_LESS_THAN    reduce using rule 141 (constant -> EXPONANTIAL .)
    OP_LESS_THAN_E  reduce using rule 141 (constant -> EXPONANTIAL .)
    EQUAL           reduce using rule 141 (constant -> EXPONANTIAL .)
    NOT_EQUAL       reduce using rule 141 (constant -> EXPONANTIAL .)
    STRING_CMP      reduce using rule 141 (constant -> EXPONANTIAL .)
    AND             reduce using rule 141 (constant -> EXPONANTIAL .)
    OR              reduce using rule 141 (constant -> EXPONANTIAL .)
    SEMICOLON       reduce using rule 141 (constant -> EXPONANTIAL .)
    RPAR            reduce using rule 141 (constant -> EXPONANTIAL .)
    COMMA           reduce using rule 141 (constant -> EXPONANTIAL .)
    COLON           reduce using rule 141 (constant -> EXPONANTIAL .)
    BLOCK_BEGIN     reduce using rule 141 (constant -> EXPONANTIAL .)


state 21

    (14) statement -> continue . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    M_QUAD                         shift and go to state 78
    epsilon                        shift and go to state 63

state 22

    (15) statement -> print . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 79

state 23

    (136) constant -> INTEGER .

    INCREAMENT      reduce using rule 136 (constant -> INTEGER .)
    DCREAMENT       reduce using rule 136 (constant -> INTEGER .)
    PLUS            reduce using rule 136 (constant -> INTEGER .)
    MINUS           reduce using rule 136 (constant -> INTEGER .)
    MULTIPLY        reduce using rule 136 (constant -> INTEGER .)
    DIVIDE          reduce using rule 136 (constant -> INTEGER .)
    MODULUS         reduce using rule 136 (constant -> INTEGER .)
    EXPONENT        reduce using rule 136 (constant -> INTEGER .)
    Q_MARK          reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN_E reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN    reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN_E  reduce using rule 136 (constant -> INTEGER .)
    EQUAL           reduce using rule 136 (constant -> INTEGER .)
    NOT_EQUAL       reduce using rule 136 (constant -> INTEGER .)
    STRING_CMP      reduce using rule 136 (constant -> INTEGER .)
    AND             reduce using rule 136 (constant -> INTEGER .)
    OR              reduce using rule 136 (constant -> INTEGER .)
    SEMICOLON       reduce using rule 136 (constant -> INTEGER .)
    RPAR            reduce using rule 136 (constant -> INTEGER .)
    COMMA           reduce using rule 136 (constant -> INTEGER .)
    COLON           reduce using rule 136 (constant -> INTEGER .)
    BLOCK_BEGIN     reduce using rule 136 (constant -> INTEGER .)


state 24

    (44) for_statement -> FOR . LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> FOR . LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON

    LPAR            shift and go to state 80


state 25

    (77) assignment -> HASH_VARIABLE . ASSIGNMENT LPAR hashList RPAR SEMICOLON

    ASSIGNMENT      shift and go to state 81


state 26

    (144) expression -> INPUT .

    INCREAMENT      reduce using rule 144 (expression -> INPUT .)
    DCREAMENT       reduce using rule 144 (expression -> INPUT .)
    PLUS            reduce using rule 144 (expression -> INPUT .)
    MINUS           reduce using rule 144 (expression -> INPUT .)
    MULTIPLY        reduce using rule 144 (expression -> INPUT .)
    DIVIDE          reduce using rule 144 (expression -> INPUT .)
    MODULUS         reduce using rule 144 (expression -> INPUT .)
    EXPONENT        reduce using rule 144 (expression -> INPUT .)
    Q_MARK          reduce using rule 144 (expression -> INPUT .)
    OP_GREATER_THAN reduce using rule 144 (expression -> INPUT .)
    OP_GREATER_THAN_E reduce using rule 144 (expression -> INPUT .)
    OP_LESS_THAN    reduce using rule 144 (expression -> INPUT .)
    OP_LESS_THAN_E  reduce using rule 144 (expression -> INPUT .)
    EQUAL           reduce using rule 144 (expression -> INPUT .)
    NOT_EQUAL       reduce using rule 144 (expression -> INPUT .)
    STRING_CMP      reduce using rule 144 (expression -> INPUT .)
    AND             reduce using rule 144 (expression -> INPUT .)
    OR              reduce using rule 144 (expression -> INPUT .)
    SEMICOLON       reduce using rule 144 (expression -> INPUT .)
    RPAR            reduce using rule 144 (expression -> INPUT .)
    COMMA           reduce using rule 144 (expression -> INPUT .)
    COLON           reduce using rule 144 (expression -> INPUT .)
    BLOCK_BEGIN     reduce using rule 144 (expression -> INPUT .)


state 27

    (73) assignment -> SCALAR_VARIABLE . ASSIGNMENT expression SEMICOLON
    (74) assignment -> SCALAR_VARIABLE . ASSIGNMENT function_call SEMICOLON
    (75) assignment -> SCALAR_VARIABLE . SIMULT_ASSIGNMENT function_call SEMICOLON
    (134) expression -> SCALAR_VARIABLE .

    ASSIGNMENT      shift and go to state 82
    SIMULT_ASSIGNMENT shift and go to state 83
    INCREAMENT      reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    DCREAMENT       reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    PLUS            reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MINUS           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MULTIPLY        reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    DIVIDE          reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MODULUS         reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    EXPONENT        reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    Q_MARK          reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_GREATER_THAN reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_GREATER_THAN_E reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_LESS_THAN    reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_LESS_THAN_E  reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    EQUAL           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    NOT_EQUAL       reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    STRING_CMP      reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    AND             reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OR              reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    SEMICOLON       reduce using rule 134 (expression -> SCALAR_VARIABLE .)


state 28

    (143) constant -> PSEUDO_STRING .

    INCREAMENT      reduce using rule 143 (constant -> PSEUDO_STRING .)
    DCREAMENT       reduce using rule 143 (constant -> PSEUDO_STRING .)
    PLUS            reduce using rule 143 (constant -> PSEUDO_STRING .)
    MINUS           reduce using rule 143 (constant -> PSEUDO_STRING .)
    MULTIPLY        reduce using rule 143 (constant -> PSEUDO_STRING .)
    DIVIDE          reduce using rule 143 (constant -> PSEUDO_STRING .)
    MODULUS         reduce using rule 143 (constant -> PSEUDO_STRING .)
    EXPONENT        reduce using rule 143 (constant -> PSEUDO_STRING .)
    Q_MARK          reduce using rule 143 (constant -> PSEUDO_STRING .)
    OP_GREATER_THAN reduce using rule 143 (constant -> PSEUDO_STRING .)
    OP_GREATER_THAN_E reduce using rule 143 (constant -> PSEUDO_STRING .)
    OP_LESS_THAN    reduce using rule 143 (constant -> PSEUDO_STRING .)
    OP_LESS_THAN_E  reduce using rule 143 (constant -> PSEUDO_STRING .)
    EQUAL           reduce using rule 143 (constant -> PSEUDO_STRING .)
    NOT_EQUAL       reduce using rule 143 (constant -> PSEUDO_STRING .)
    STRING_CMP      reduce using rule 143 (constant -> PSEUDO_STRING .)
    AND             reduce using rule 143 (constant -> PSEUDO_STRING .)
    OR              reduce using rule 143 (constant -> PSEUDO_STRING .)
    SEMICOLON       reduce using rule 143 (constant -> PSEUDO_STRING .)
    RPAR            reduce using rule 143 (constant -> PSEUDO_STRING .)
    COMMA           reduce using rule 143 (constant -> PSEUDO_STRING .)
    COLON           reduce using rule 143 (constant -> PSEUDO_STRING .)
    BLOCK_BEGIN     reduce using rule 143 (constant -> PSEUDO_STRING .)


state 29

    (99) continue -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 84


state 30

    (132) expression -> NOT . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 85

state 31

    (66) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> MY . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> MY . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> MY . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (89) declaration -> MY . SCALAR_VARIABLE SEMICOLON
    (90) declaration -> MY . ARRAY_VARIABLE SEMICOLON

    ARRAY_VARIABLE  shift and go to state 88
    SCALAR_VARIABLE shift and go to state 87
    HASH_VARIABLE   shift and go to state 86


state 32

    (2) segments -> statements_subroutine . segments
    (3) segments -> statements_subroutine . M_segments
    (2) segments -> . statements_subroutine segments
    (3) segments -> . statements_subroutine M_segments
    (6) M_segments -> . epsilon
    (4) statements_subroutine -> . statements
    (5) statements_subroutine -> . subroutine
    (147) epsilon -> .
    (8) statements -> . statement statements
    (9) statements -> . statement M_STATEMENTS
    (101) subroutine -> . SUB marker identifier M_sub block marker1
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    $end            reduce using rule 147 (epsilon -> .)
    SUB             shift and go to state 34
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    statements                     shift and go to state 33
    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    segments                       shift and go to state 89
    M_segments                     shift and go to state 90
    while_statement                shift and go to state 5
    statement                      shift and go to state 42
    assignment                     shift and go to state 55
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    epsilon                        shift and go to state 91
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    subroutine                     shift and go to state 47
    die                            shift and go to state 12
    continue                       shift and go to state 21
    statements_subroutine          shift and go to state 32
    expression                     shift and go to state 57

state 33

    (4) statements_subroutine -> statements .

    SUB             reduce using rule 4 (statements_subroutine -> statements .)
    FOREACH         reduce using rule 4 (statements_subroutine -> statements .)
    MY              reduce using rule 4 (statements_subroutine -> statements .)
    SCALAR_VARIABLE reduce using rule 4 (statements_subroutine -> statements .)
    ARRAY_VARIABLE  reduce using rule 4 (statements_subroutine -> statements .)
    HASH_VARIABLE   reduce using rule 4 (statements_subroutine -> statements .)
    BREAK           reduce using rule 4 (statements_subroutine -> statements .)
    CONTINUE        reduce using rule 4 (statements_subroutine -> statements .)
    PRINT           reduce using rule 4 (statements_subroutine -> statements .)
    RETURN          reduce using rule 4 (statements_subroutine -> statements .)
    DIE             reduce using rule 4 (statements_subroutine -> statements .)
    CHOMP           reduce using rule 4 (statements_subroutine -> statements .)
    MINUS           reduce using rule 4 (statements_subroutine -> statements .)
    INCREAMENT      reduce using rule 4 (statements_subroutine -> statements .)
    DCREAMENT       reduce using rule 4 (statements_subroutine -> statements .)
    NOT             reduce using rule 4 (statements_subroutine -> statements .)
    LPAR            reduce using rule 4 (statements_subroutine -> statements .)
    INPUT           reduce using rule 4 (statements_subroutine -> statements .)
    USE             reduce using rule 4 (statements_subroutine -> statements .)
    WHILE           reduce using rule 4 (statements_subroutine -> statements .)
    DO              reduce using rule 4 (statements_subroutine -> statements .)
    FOR             reduce using rule 4 (statements_subroutine -> statements .)
    SWITCH          reduce using rule 4 (statements_subroutine -> statements .)
    IF              reduce using rule 4 (statements_subroutine -> statements .)
    IDENTIFIER      reduce using rule 4 (statements_subroutine -> statements .)
    INTEGER         reduce using rule 4 (statements_subroutine -> statements .)
    FLOAT           reduce using rule 4 (statements_subroutine -> statements .)
    HEXADECIMAL     reduce using rule 4 (statements_subroutine -> statements .)
    OCTAL           reduce using rule 4 (statements_subroutine -> statements .)
    BINARY          reduce using rule 4 (statements_subroutine -> statements .)
    EXPONANTIAL     reduce using rule 4 (statements_subroutine -> statements .)
    STRING          reduce using rule 4 (statements_subroutine -> statements .)
    PSEUDO_STRING   reduce using rule 4 (statements_subroutine -> statements .)
    $end            reduce using rule 4 (statements_subroutine -> statements .)


state 34

    (101) subroutine -> SUB . marker identifier M_sub block marker1
    (104) marker -> . epsilon
    (147) epsilon -> .

    IDENTIFIER      reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 92
    marker                         shift and go to state 93

state 35

    (43) do_while_statement -> DO . M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 94

state 36

    (40) while_statement -> WHILE . M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    LPAR            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 95

state 37

    (76) assignment -> ARRAY_VARIABLE . ASSIGNMENT array SEMICOLON
    (78) assignment -> ARRAY_VARIABLE . ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> ARRAY_VARIABLE . ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> ARRAY_VARIABLE . ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON

    ASSIGNMENT      shift and go to state 96


state 38

    (20) statement -> use . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 97

state 39

    (110) expression -> INCREAMENT . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 98

state 40

    (0) S' -> start .



state 41

    (59) switch_statement -> SWITCH . LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END

    LPAR            shift and go to state 99


state 42

    (8) statements -> statement . statements
    (9) statements -> statement . M_STATEMENTS
    (8) statements -> . statement statements
    (9) statements -> . statement M_STATEMENTS
    (146) M_STATEMENTS -> . epsilon
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (147) epsilon -> .
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for MY resolved as shift
  ! shift/reduce conflict for SCALAR_VARIABLE resolved as shift
  ! shift/reduce conflict for ARRAY_VARIABLE resolved as shift
  ! shift/reduce conflict for HASH_VARIABLE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DIE resolved as shift
  ! shift/reduce conflict for CHOMP resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INCREAMENT resolved as shift
  ! shift/reduce conflict for DCREAMENT resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for USE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for HEXADECIMAL resolved as shift
  ! shift/reduce conflict for OCTAL resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for EXPONANTIAL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for PSEUDO_STRING resolved as shift
    FOREACH         shift and go to state 9
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

  ! FOREACH         [ reduce using rule 147 (epsilon -> .) ]
  ! MY              [ reduce using rule 147 (epsilon -> .) ]
  ! SCALAR_VARIABLE [ reduce using rule 147 (epsilon -> .) ]
  ! ARRAY_VARIABLE  [ reduce using rule 147 (epsilon -> .) ]
  ! HASH_VARIABLE   [ reduce using rule 147 (epsilon -> .) ]
  ! BREAK           [ reduce using rule 147 (epsilon -> .) ]
  ! CONTINUE        [ reduce using rule 147 (epsilon -> .) ]
  ! PRINT           [ reduce using rule 147 (epsilon -> .) ]
  ! RETURN          [ reduce using rule 147 (epsilon -> .) ]
  ! DIE             [ reduce using rule 147 (epsilon -> .) ]
  ! CHOMP           [ reduce using rule 147 (epsilon -> .) ]
  ! MINUS           [ reduce using rule 147 (epsilon -> .) ]
  ! INCREAMENT      [ reduce using rule 147 (epsilon -> .) ]
  ! DCREAMENT       [ reduce using rule 147 (epsilon -> .) ]
  ! NOT             [ reduce using rule 147 (epsilon -> .) ]
  ! LPAR            [ reduce using rule 147 (epsilon -> .) ]
  ! INPUT           [ reduce using rule 147 (epsilon -> .) ]
  ! USE             [ reduce using rule 147 (epsilon -> .) ]
  ! WHILE           [ reduce using rule 147 (epsilon -> .) ]
  ! DO              [ reduce using rule 147 (epsilon -> .) ]
  ! FOR             [ reduce using rule 147 (epsilon -> .) ]
  ! SWITCH          [ reduce using rule 147 (epsilon -> .) ]
  ! IF              [ reduce using rule 147 (epsilon -> .) ]
  ! IDENTIFIER      [ reduce using rule 147 (epsilon -> .) ]
  ! INTEGER         [ reduce using rule 147 (epsilon -> .) ]
  ! FLOAT           [ reduce using rule 147 (epsilon -> .) ]
  ! HEXADECIMAL     [ reduce using rule 147 (epsilon -> .) ]
  ! OCTAL           [ reduce using rule 147 (epsilon -> .) ]
  ! BINARY          [ reduce using rule 147 (epsilon -> .) ]
  ! EXPONANTIAL     [ reduce using rule 147 (epsilon -> .) ]
  ! STRING          [ reduce using rule 147 (epsilon -> .) ]
  ! PSEUDO_STRING   [ reduce using rule 147 (epsilon -> .) ]

    statements                     shift and go to state 100
    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 42
    assignment                     shift and go to state 55
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    epsilon                        shift and go to state 101
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    die                            shift and go to state 12
    M_STATEMENTS                   shift and go to state 102
    continue                       shift and go to state 21
    expression                     shift and go to state 57

state 43

    (92) function_name -> IDENTIFIER .

    LPAR            reduce using rule 92 (function_name -> IDENTIFIER .)


state 44

    (91) function_call -> function_name . LPAR argumentList RPAR SEMICOLON

    LPAR            shift and go to state 103


state 45

    (18) statement -> chomp . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 104

state 46

    (11) statement -> declaration . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 105

state 47

    (5) statements_subroutine -> subroutine .

    SUB             reduce using rule 5 (statements_subroutine -> subroutine .)
    FOREACH         reduce using rule 5 (statements_subroutine -> subroutine .)
    MY              reduce using rule 5 (statements_subroutine -> subroutine .)
    SCALAR_VARIABLE reduce using rule 5 (statements_subroutine -> subroutine .)
    ARRAY_VARIABLE  reduce using rule 5 (statements_subroutine -> subroutine .)
    HASH_VARIABLE   reduce using rule 5 (statements_subroutine -> subroutine .)
    BREAK           reduce using rule 5 (statements_subroutine -> subroutine .)
    CONTINUE        reduce using rule 5 (statements_subroutine -> subroutine .)
    PRINT           reduce using rule 5 (statements_subroutine -> subroutine .)
    RETURN          reduce using rule 5 (statements_subroutine -> subroutine .)
    DIE             reduce using rule 5 (statements_subroutine -> subroutine .)
    CHOMP           reduce using rule 5 (statements_subroutine -> subroutine .)
    MINUS           reduce using rule 5 (statements_subroutine -> subroutine .)
    INCREAMENT      reduce using rule 5 (statements_subroutine -> subroutine .)
    DCREAMENT       reduce using rule 5 (statements_subroutine -> subroutine .)
    NOT             reduce using rule 5 (statements_subroutine -> subroutine .)
    LPAR            reduce using rule 5 (statements_subroutine -> subroutine .)
    INPUT           reduce using rule 5 (statements_subroutine -> subroutine .)
    USE             reduce using rule 5 (statements_subroutine -> subroutine .)
    WHILE           reduce using rule 5 (statements_subroutine -> subroutine .)
    DO              reduce using rule 5 (statements_subroutine -> subroutine .)
    FOR             reduce using rule 5 (statements_subroutine -> subroutine .)
    SWITCH          reduce using rule 5 (statements_subroutine -> subroutine .)
    IF              reduce using rule 5 (statements_subroutine -> subroutine .)
    IDENTIFIER      reduce using rule 5 (statements_subroutine -> subroutine .)
    INTEGER         reduce using rule 5 (statements_subroutine -> subroutine .)
    FLOAT           reduce using rule 5 (statements_subroutine -> subroutine .)
    HEXADECIMAL     reduce using rule 5 (statements_subroutine -> subroutine .)
    OCTAL           reduce using rule 5 (statements_subroutine -> subroutine .)
    BINARY          reduce using rule 5 (statements_subroutine -> subroutine .)
    EXPONANTIAL     reduce using rule 5 (statements_subroutine -> subroutine .)
    STRING          reduce using rule 5 (statements_subroutine -> subroutine .)
    PSEUDO_STRING   reduce using rule 5 (statements_subroutine -> subroutine .)
    $end            reduce using rule 5 (statements_subroutine -> subroutine .)


state 48

    (100) chomp -> CHOMP . expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 106

state 49

    (98) break -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 107


state 50

    (27) use -> USE . STRICT SEMICOLON
    (28) use -> USE . WARNINGS SEMICOLON

    STRICT          shift and go to state 108
    WARNINGS        shift and go to state 109


state 51

    (135) expression -> constant .

    INCREAMENT      reduce using rule 135 (expression -> constant .)
    DCREAMENT       reduce using rule 135 (expression -> constant .)
    PLUS            reduce using rule 135 (expression -> constant .)
    MINUS           reduce using rule 135 (expression -> constant .)
    MULTIPLY        reduce using rule 135 (expression -> constant .)
    DIVIDE          reduce using rule 135 (expression -> constant .)
    MODULUS         reduce using rule 135 (expression -> constant .)
    EXPONENT        reduce using rule 135 (expression -> constant .)
    Q_MARK          reduce using rule 135 (expression -> constant .)
    OP_GREATER_THAN reduce using rule 135 (expression -> constant .)
    OP_GREATER_THAN_E reduce using rule 135 (expression -> constant .)
    OP_LESS_THAN    reduce using rule 135 (expression -> constant .)
    OP_LESS_THAN_E  reduce using rule 135 (expression -> constant .)
    EQUAL           reduce using rule 135 (expression -> constant .)
    NOT_EQUAL       reduce using rule 135 (expression -> constant .)
    STRING_CMP      reduce using rule 135 (expression -> constant .)
    AND             reduce using rule 135 (expression -> constant .)
    OR              reduce using rule 135 (expression -> constant .)
    SEMICOLON       reduce using rule 135 (expression -> constant .)
    RPAR            reduce using rule 135 (expression -> constant .)
    COMMA           reduce using rule 135 (expression -> constant .)
    COLON           reduce using rule 135 (expression -> constant .)
    BLOCK_BEGIN     reduce using rule 135 (expression -> constant .)


state 52

    (107) die -> DIE . printlist SEMICOLON
    (108) printlist -> . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    expression                     shift and go to state 74
    constant                       shift and go to state 51
    printlist                      shift and go to state 110

state 53

    (25) statement -> if_statement . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    M_QUAD                         shift and go to state 111
    epsilon                        shift and go to state 63

state 54

    (142) constant -> STRING .

    INCREAMENT      reduce using rule 142 (constant -> STRING .)
    DCREAMENT       reduce using rule 142 (constant -> STRING .)
    PLUS            reduce using rule 142 (constant -> STRING .)
    MINUS           reduce using rule 142 (constant -> STRING .)
    MULTIPLY        reduce using rule 142 (constant -> STRING .)
    DIVIDE          reduce using rule 142 (constant -> STRING .)
    MODULUS         reduce using rule 142 (constant -> STRING .)
    EXPONENT        reduce using rule 142 (constant -> STRING .)
    Q_MARK          reduce using rule 142 (constant -> STRING .)
    OP_GREATER_THAN reduce using rule 142 (constant -> STRING .)
    OP_GREATER_THAN_E reduce using rule 142 (constant -> STRING .)
    OP_LESS_THAN    reduce using rule 142 (constant -> STRING .)
    OP_LESS_THAN_E  reduce using rule 142 (constant -> STRING .)
    EQUAL           reduce using rule 142 (constant -> STRING .)
    NOT_EQUAL       reduce using rule 142 (constant -> STRING .)
    STRING_CMP      reduce using rule 142 (constant -> STRING .)
    AND             reduce using rule 142 (constant -> STRING .)
    OR              reduce using rule 142 (constant -> STRING .)
    SEMICOLON       reduce using rule 142 (constant -> STRING .)
    RPAR            reduce using rule 142 (constant -> STRING .)
    COMMA           reduce using rule 142 (constant -> STRING .)
    COLON           reduce using rule 142 (constant -> STRING .)
    BLOCK_BEGIN     reduce using rule 142 (constant -> STRING .)


state 55

    (10) statement -> assignment . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    SUB             reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)
    ELSE            reduce using rule 147 (epsilon -> .)

    M_QUAD                         shift and go to state 112
    epsilon                        shift and go to state 63

state 56

    (32) if_statement -> IF . expression RPAR M_if block_or_statement
    (34) ifelse_statement -> IF . expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 113

state 57

    (19) statement -> expression . M_QUAD SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132
    SEMICOLON       reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 131

state 58

    (137) constant -> FLOAT .

    INCREAMENT      reduce using rule 137 (constant -> FLOAT .)
    DCREAMENT       reduce using rule 137 (constant -> FLOAT .)
    PLUS            reduce using rule 137 (constant -> FLOAT .)
    MINUS           reduce using rule 137 (constant -> FLOAT .)
    MULTIPLY        reduce using rule 137 (constant -> FLOAT .)
    DIVIDE          reduce using rule 137 (constant -> FLOAT .)
    MODULUS         reduce using rule 137 (constant -> FLOAT .)
    EXPONENT        reduce using rule 137 (constant -> FLOAT .)
    Q_MARK          reduce using rule 137 (constant -> FLOAT .)
    OP_GREATER_THAN reduce using rule 137 (constant -> FLOAT .)
    OP_GREATER_THAN_E reduce using rule 137 (constant -> FLOAT .)
    OP_LESS_THAN    reduce using rule 137 (constant -> FLOAT .)
    OP_LESS_THAN_E  reduce using rule 137 (constant -> FLOAT .)
    EQUAL           reduce using rule 137 (constant -> FLOAT .)
    NOT_EQUAL       reduce using rule 137 (constant -> FLOAT .)
    STRING_CMP      reduce using rule 137 (constant -> FLOAT .)
    AND             reduce using rule 137 (constant -> FLOAT .)
    OR              reduce using rule 137 (constant -> FLOAT .)
    SEMICOLON       reduce using rule 137 (constant -> FLOAT .)
    RPAR            reduce using rule 137 (constant -> FLOAT .)
    COMMA           reduce using rule 137 (constant -> FLOAT .)
    COLON           reduce using rule 137 (constant -> FLOAT .)
    BLOCK_BEGIN     reduce using rule 137 (constant -> FLOAT .)


state 59

    (134) expression -> SCALAR_VARIABLE .

    INCREAMENT      reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    DCREAMENT       reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    PLUS            reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MINUS           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MULTIPLY        reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    DIVIDE          reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    MODULUS         reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    EXPONENT        reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    Q_MARK          reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_GREATER_THAN reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_GREATER_THAN_E reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_LESS_THAN    reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OP_LESS_THAN_E  reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    EQUAL           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    NOT_EQUAL       reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    STRING_CMP      reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    AND             reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    OR              reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    SEMICOLON       reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    RPAR            reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    COMMA           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    COLON           reduce using rule 134 (expression -> SCALAR_VARIABLE .)
    BLOCK_BEGIN     reduce using rule 134 (expression -> SCALAR_VARIABLE .)


state 60

    (133) expression -> LPAR expression . RPAR
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    RPAR            shift and go to state 133
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 61

    (109) expression -> MINUS expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 109 (expression -> MINUS expression .)
    DCREAMENT       reduce using rule 109 (expression -> MINUS expression .)
    PLUS            reduce using rule 109 (expression -> MINUS expression .)
    MINUS           reduce using rule 109 (expression -> MINUS expression .)
    EXPONENT        reduce using rule 109 (expression -> MINUS expression .)
    Q_MARK          reduce using rule 109 (expression -> MINUS expression .)
    OP_GREATER_THAN reduce using rule 109 (expression -> MINUS expression .)
    OP_GREATER_THAN_E reduce using rule 109 (expression -> MINUS expression .)
    OP_LESS_THAN    reduce using rule 109 (expression -> MINUS expression .)
    OP_LESS_THAN_E  reduce using rule 109 (expression -> MINUS expression .)
    EQUAL           reduce using rule 109 (expression -> MINUS expression .)
    NOT_EQUAL       reduce using rule 109 (expression -> MINUS expression .)
    STRING_CMP      reduce using rule 109 (expression -> MINUS expression .)
    AND             reduce using rule 109 (expression -> MINUS expression .)
    OR              reduce using rule 109 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 109 (expression -> MINUS expression .)
    RPAR            reduce using rule 109 (expression -> MINUS expression .)
    COMMA           reduce using rule 109 (expression -> MINUS expression .)
    COLON           reduce using rule 109 (expression -> MINUS expression .)
    BLOCK_BEGIN     reduce using rule 109 (expression -> MINUS expression .)
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128

  ! MULTIPLY        [ reduce using rule 109 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 109 (expression -> MINUS expression .) ]
  ! MODULUS         [ reduce using rule 109 (expression -> MINUS expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 62

    (112) expression -> DCREAMENT expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

  ! shift/reduce conflict for INCREAMENT resolved as shift
  ! shift/reduce conflict for DCREAMENT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for Q_MARK resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN_E resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN_E resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for STRING_CMP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 112 (expression -> DCREAMENT expression .)
    RPAR            reduce using rule 112 (expression -> DCREAMENT expression .)
    COMMA           reduce using rule 112 (expression -> DCREAMENT expression .)
    COLON           reduce using rule 112 (expression -> DCREAMENT expression .)
    BLOCK_BEGIN     reduce using rule 112 (expression -> DCREAMENT expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132

  ! INCREAMENT      [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! DCREAMENT       [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! PLUS            [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! MINUS           [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! MULTIPLY        [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! DIVIDE          [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! MODULUS         [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! EXPONENT        [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! Q_MARK          [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! EQUAL           [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! NOT_EQUAL       [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! STRING_CMP      [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! AND             [ reduce using rule 112 (expression -> DCREAMENT expression .) ]
  ! OR              [ reduce using rule 112 (expression -> DCREAMENT expression .) ]


state 63

    (145) M_QUAD -> epsilon .

    FOREACH         reduce using rule 145 (M_QUAD -> epsilon .)
    MY              reduce using rule 145 (M_QUAD -> epsilon .)
    SCALAR_VARIABLE reduce using rule 145 (M_QUAD -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 145 (M_QUAD -> epsilon .)
    HASH_VARIABLE   reduce using rule 145 (M_QUAD -> epsilon .)
    BREAK           reduce using rule 145 (M_QUAD -> epsilon .)
    CONTINUE        reduce using rule 145 (M_QUAD -> epsilon .)
    PRINT           reduce using rule 145 (M_QUAD -> epsilon .)
    RETURN          reduce using rule 145 (M_QUAD -> epsilon .)
    DIE             reduce using rule 145 (M_QUAD -> epsilon .)
    CHOMP           reduce using rule 145 (M_QUAD -> epsilon .)
    MINUS           reduce using rule 145 (M_QUAD -> epsilon .)
    INCREAMENT      reduce using rule 145 (M_QUAD -> epsilon .)
    DCREAMENT       reduce using rule 145 (M_QUAD -> epsilon .)
    NOT             reduce using rule 145 (M_QUAD -> epsilon .)
    LPAR            reduce using rule 145 (M_QUAD -> epsilon .)
    INPUT           reduce using rule 145 (M_QUAD -> epsilon .)
    USE             reduce using rule 145 (M_QUAD -> epsilon .)
    WHILE           reduce using rule 145 (M_QUAD -> epsilon .)
    DO              reduce using rule 145 (M_QUAD -> epsilon .)
    FOR             reduce using rule 145 (M_QUAD -> epsilon .)
    SWITCH          reduce using rule 145 (M_QUAD -> epsilon .)
    IF              reduce using rule 145 (M_QUAD -> epsilon .)
    IDENTIFIER      reduce using rule 145 (M_QUAD -> epsilon .)
    INTEGER         reduce using rule 145 (M_QUAD -> epsilon .)
    FLOAT           reduce using rule 145 (M_QUAD -> epsilon .)
    HEXADECIMAL     reduce using rule 145 (M_QUAD -> epsilon .)
    OCTAL           reduce using rule 145 (M_QUAD -> epsilon .)
    BINARY          reduce using rule 145 (M_QUAD -> epsilon .)
    EXPONANTIAL     reduce using rule 145 (M_QUAD -> epsilon .)
    STRING          reduce using rule 145 (M_QUAD -> epsilon .)
    PSEUDO_STRING   reduce using rule 145 (M_QUAD -> epsilon .)
    SUB             reduce using rule 145 (M_QUAD -> epsilon .)
    $end            reduce using rule 145 (M_QUAD -> epsilon .)
    BLOCK_END       reduce using rule 145 (M_QUAD -> epsilon .)
    ELSE            reduce using rule 145 (M_QUAD -> epsilon .)
    CASE            reduce using rule 145 (M_QUAD -> epsilon .)
    SEMICOLON       reduce using rule 145 (M_QUAD -> epsilon .)
    BLOCK_BEGIN     reduce using rule 145 (M_QUAD -> epsilon .)


state 64

    (21) statement -> while_statement M_QUAD .

    ELSE            reduce using rule 21 (statement -> while_statement M_QUAD .)
    FOREACH         reduce using rule 21 (statement -> while_statement M_QUAD .)
    MY              reduce using rule 21 (statement -> while_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 21 (statement -> while_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 21 (statement -> while_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 21 (statement -> while_statement M_QUAD .)
    BREAK           reduce using rule 21 (statement -> while_statement M_QUAD .)
    CONTINUE        reduce using rule 21 (statement -> while_statement M_QUAD .)
    PRINT           reduce using rule 21 (statement -> while_statement M_QUAD .)
    RETURN          reduce using rule 21 (statement -> while_statement M_QUAD .)
    DIE             reduce using rule 21 (statement -> while_statement M_QUAD .)
    CHOMP           reduce using rule 21 (statement -> while_statement M_QUAD .)
    MINUS           reduce using rule 21 (statement -> while_statement M_QUAD .)
    INCREAMENT      reduce using rule 21 (statement -> while_statement M_QUAD .)
    DCREAMENT       reduce using rule 21 (statement -> while_statement M_QUAD .)
    NOT             reduce using rule 21 (statement -> while_statement M_QUAD .)
    LPAR            reduce using rule 21 (statement -> while_statement M_QUAD .)
    INPUT           reduce using rule 21 (statement -> while_statement M_QUAD .)
    USE             reduce using rule 21 (statement -> while_statement M_QUAD .)
    WHILE           reduce using rule 21 (statement -> while_statement M_QUAD .)
    DO              reduce using rule 21 (statement -> while_statement M_QUAD .)
    FOR             reduce using rule 21 (statement -> while_statement M_QUAD .)
    SWITCH          reduce using rule 21 (statement -> while_statement M_QUAD .)
    IF              reduce using rule 21 (statement -> while_statement M_QUAD .)
    IDENTIFIER      reduce using rule 21 (statement -> while_statement M_QUAD .)
    INTEGER         reduce using rule 21 (statement -> while_statement M_QUAD .)
    FLOAT           reduce using rule 21 (statement -> while_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 21 (statement -> while_statement M_QUAD .)
    OCTAL           reduce using rule 21 (statement -> while_statement M_QUAD .)
    BINARY          reduce using rule 21 (statement -> while_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 21 (statement -> while_statement M_QUAD .)
    STRING          reduce using rule 21 (statement -> while_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 21 (statement -> while_statement M_QUAD .)
    SUB             reduce using rule 21 (statement -> while_statement M_QUAD .)
    $end            reduce using rule 21 (statement -> while_statement M_QUAD .)
    BLOCK_END       reduce using rule 21 (statement -> while_statement M_QUAD .)


state 65

    (23) statement -> for_statement M_QUAD .

    ELSE            reduce using rule 23 (statement -> for_statement M_QUAD .)
    FOREACH         reduce using rule 23 (statement -> for_statement M_QUAD .)
    MY              reduce using rule 23 (statement -> for_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 23 (statement -> for_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 23 (statement -> for_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 23 (statement -> for_statement M_QUAD .)
    BREAK           reduce using rule 23 (statement -> for_statement M_QUAD .)
    CONTINUE        reduce using rule 23 (statement -> for_statement M_QUAD .)
    PRINT           reduce using rule 23 (statement -> for_statement M_QUAD .)
    RETURN          reduce using rule 23 (statement -> for_statement M_QUAD .)
    DIE             reduce using rule 23 (statement -> for_statement M_QUAD .)
    CHOMP           reduce using rule 23 (statement -> for_statement M_QUAD .)
    MINUS           reduce using rule 23 (statement -> for_statement M_QUAD .)
    INCREAMENT      reduce using rule 23 (statement -> for_statement M_QUAD .)
    DCREAMENT       reduce using rule 23 (statement -> for_statement M_QUAD .)
    NOT             reduce using rule 23 (statement -> for_statement M_QUAD .)
    LPAR            reduce using rule 23 (statement -> for_statement M_QUAD .)
    INPUT           reduce using rule 23 (statement -> for_statement M_QUAD .)
    USE             reduce using rule 23 (statement -> for_statement M_QUAD .)
    WHILE           reduce using rule 23 (statement -> for_statement M_QUAD .)
    DO              reduce using rule 23 (statement -> for_statement M_QUAD .)
    FOR             reduce using rule 23 (statement -> for_statement M_QUAD .)
    SWITCH          reduce using rule 23 (statement -> for_statement M_QUAD .)
    IF              reduce using rule 23 (statement -> for_statement M_QUAD .)
    IDENTIFIER      reduce using rule 23 (statement -> for_statement M_QUAD .)
    INTEGER         reduce using rule 23 (statement -> for_statement M_QUAD .)
    FLOAT           reduce using rule 23 (statement -> for_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 23 (statement -> for_statement M_QUAD .)
    OCTAL           reduce using rule 23 (statement -> for_statement M_QUAD .)
    BINARY          reduce using rule 23 (statement -> for_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 23 (statement -> for_statement M_QUAD .)
    STRING          reduce using rule 23 (statement -> for_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 23 (statement -> for_statement M_QUAD .)
    SUB             reduce using rule 23 (statement -> for_statement M_QUAD .)
    $end            reduce using rule 23 (statement -> for_statement M_QUAD .)
    BLOCK_END       reduce using rule 23 (statement -> for_statement M_QUAD .)


state 66

    (16) statement -> return M_QUAD .

    ELSE            reduce using rule 16 (statement -> return M_QUAD .)
    FOREACH         reduce using rule 16 (statement -> return M_QUAD .)
    MY              reduce using rule 16 (statement -> return M_QUAD .)
    SCALAR_VARIABLE reduce using rule 16 (statement -> return M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 16 (statement -> return M_QUAD .)
    HASH_VARIABLE   reduce using rule 16 (statement -> return M_QUAD .)
    BREAK           reduce using rule 16 (statement -> return M_QUAD .)
    CONTINUE        reduce using rule 16 (statement -> return M_QUAD .)
    PRINT           reduce using rule 16 (statement -> return M_QUAD .)
    RETURN          reduce using rule 16 (statement -> return M_QUAD .)
    DIE             reduce using rule 16 (statement -> return M_QUAD .)
    CHOMP           reduce using rule 16 (statement -> return M_QUAD .)
    MINUS           reduce using rule 16 (statement -> return M_QUAD .)
    INCREAMENT      reduce using rule 16 (statement -> return M_QUAD .)
    DCREAMENT       reduce using rule 16 (statement -> return M_QUAD .)
    NOT             reduce using rule 16 (statement -> return M_QUAD .)
    LPAR            reduce using rule 16 (statement -> return M_QUAD .)
    INPUT           reduce using rule 16 (statement -> return M_QUAD .)
    USE             reduce using rule 16 (statement -> return M_QUAD .)
    WHILE           reduce using rule 16 (statement -> return M_QUAD .)
    DO              reduce using rule 16 (statement -> return M_QUAD .)
    FOR             reduce using rule 16 (statement -> return M_QUAD .)
    SWITCH          reduce using rule 16 (statement -> return M_QUAD .)
    IF              reduce using rule 16 (statement -> return M_QUAD .)
    IDENTIFIER      reduce using rule 16 (statement -> return M_QUAD .)
    INTEGER         reduce using rule 16 (statement -> return M_QUAD .)
    FLOAT           reduce using rule 16 (statement -> return M_QUAD .)
    HEXADECIMAL     reduce using rule 16 (statement -> return M_QUAD .)
    OCTAL           reduce using rule 16 (statement -> return M_QUAD .)
    BINARY          reduce using rule 16 (statement -> return M_QUAD .)
    EXPONANTIAL     reduce using rule 16 (statement -> return M_QUAD .)
    STRING          reduce using rule 16 (statement -> return M_QUAD .)
    PSEUDO_STRING   reduce using rule 16 (statement -> return M_QUAD .)
    SUB             reduce using rule 16 (statement -> return M_QUAD .)
    $end            reduce using rule 16 (statement -> return M_QUAD .)
    BLOCK_END       reduce using rule 16 (statement -> return M_QUAD .)


state 67

    (13) statement -> break M_QUAD .

    ELSE            reduce using rule 13 (statement -> break M_QUAD .)
    FOREACH         reduce using rule 13 (statement -> break M_QUAD .)
    MY              reduce using rule 13 (statement -> break M_QUAD .)
    SCALAR_VARIABLE reduce using rule 13 (statement -> break M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 13 (statement -> break M_QUAD .)
    HASH_VARIABLE   reduce using rule 13 (statement -> break M_QUAD .)
    BREAK           reduce using rule 13 (statement -> break M_QUAD .)
    CONTINUE        reduce using rule 13 (statement -> break M_QUAD .)
    PRINT           reduce using rule 13 (statement -> break M_QUAD .)
    RETURN          reduce using rule 13 (statement -> break M_QUAD .)
    DIE             reduce using rule 13 (statement -> break M_QUAD .)
    CHOMP           reduce using rule 13 (statement -> break M_QUAD .)
    MINUS           reduce using rule 13 (statement -> break M_QUAD .)
    INCREAMENT      reduce using rule 13 (statement -> break M_QUAD .)
    DCREAMENT       reduce using rule 13 (statement -> break M_QUAD .)
    NOT             reduce using rule 13 (statement -> break M_QUAD .)
    LPAR            reduce using rule 13 (statement -> break M_QUAD .)
    INPUT           reduce using rule 13 (statement -> break M_QUAD .)
    USE             reduce using rule 13 (statement -> break M_QUAD .)
    WHILE           reduce using rule 13 (statement -> break M_QUAD .)
    DO              reduce using rule 13 (statement -> break M_QUAD .)
    FOR             reduce using rule 13 (statement -> break M_QUAD .)
    SWITCH          reduce using rule 13 (statement -> break M_QUAD .)
    IF              reduce using rule 13 (statement -> break M_QUAD .)
    IDENTIFIER      reduce using rule 13 (statement -> break M_QUAD .)
    INTEGER         reduce using rule 13 (statement -> break M_QUAD .)
    FLOAT           reduce using rule 13 (statement -> break M_QUAD .)
    HEXADECIMAL     reduce using rule 13 (statement -> break M_QUAD .)
    OCTAL           reduce using rule 13 (statement -> break M_QUAD .)
    BINARY          reduce using rule 13 (statement -> break M_QUAD .)
    EXPONANTIAL     reduce using rule 13 (statement -> break M_QUAD .)
    STRING          reduce using rule 13 (statement -> break M_QUAD .)
    PSEUDO_STRING   reduce using rule 13 (statement -> break M_QUAD .)
    SUB             reduce using rule 13 (statement -> break M_QUAD .)
    $end            reduce using rule 13 (statement -> break M_QUAD .)
    BLOCK_END       reduce using rule 13 (statement -> break M_QUAD .)


state 68

    (58) statement -> FOREACH LPAR . INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement

    INTEGER         shift and go to state 134


state 69

    (55) statement -> FOREACH SCALAR_VARIABLE . LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> FOREACH SCALAR_VARIABLE . LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> FOREACH SCALAR_VARIABLE . LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON

    LPAR            shift and go to state 135


state 70

    (17) statement -> die M_QUAD .

    ELSE            reduce using rule 17 (statement -> die M_QUAD .)
    FOREACH         reduce using rule 17 (statement -> die M_QUAD .)
    MY              reduce using rule 17 (statement -> die M_QUAD .)
    SCALAR_VARIABLE reduce using rule 17 (statement -> die M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 17 (statement -> die M_QUAD .)
    HASH_VARIABLE   reduce using rule 17 (statement -> die M_QUAD .)
    BREAK           reduce using rule 17 (statement -> die M_QUAD .)
    CONTINUE        reduce using rule 17 (statement -> die M_QUAD .)
    PRINT           reduce using rule 17 (statement -> die M_QUAD .)
    RETURN          reduce using rule 17 (statement -> die M_QUAD .)
    DIE             reduce using rule 17 (statement -> die M_QUAD .)
    CHOMP           reduce using rule 17 (statement -> die M_QUAD .)
    MINUS           reduce using rule 17 (statement -> die M_QUAD .)
    INCREAMENT      reduce using rule 17 (statement -> die M_QUAD .)
    DCREAMENT       reduce using rule 17 (statement -> die M_QUAD .)
    NOT             reduce using rule 17 (statement -> die M_QUAD .)
    LPAR            reduce using rule 17 (statement -> die M_QUAD .)
    INPUT           reduce using rule 17 (statement -> die M_QUAD .)
    USE             reduce using rule 17 (statement -> die M_QUAD .)
    WHILE           reduce using rule 17 (statement -> die M_QUAD .)
    DO              reduce using rule 17 (statement -> die M_QUAD .)
    FOR             reduce using rule 17 (statement -> die M_QUAD .)
    SWITCH          reduce using rule 17 (statement -> die M_QUAD .)
    IF              reduce using rule 17 (statement -> die M_QUAD .)
    IDENTIFIER      reduce using rule 17 (statement -> die M_QUAD .)
    INTEGER         reduce using rule 17 (statement -> die M_QUAD .)
    FLOAT           reduce using rule 17 (statement -> die M_QUAD .)
    HEXADECIMAL     reduce using rule 17 (statement -> die M_QUAD .)
    OCTAL           reduce using rule 17 (statement -> die M_QUAD .)
    BINARY          reduce using rule 17 (statement -> die M_QUAD .)
    EXPONANTIAL     reduce using rule 17 (statement -> die M_QUAD .)
    STRING          reduce using rule 17 (statement -> die M_QUAD .)
    PSEUDO_STRING   reduce using rule 17 (statement -> die M_QUAD .)
    SUB             reduce using rule 17 (statement -> die M_QUAD .)
    $end            reduce using rule 17 (statement -> die M_QUAD .)
    BLOCK_END       reduce using rule 17 (statement -> die M_QUAD .)


state 71

    (97) return -> RETURN expression . SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       shift and go to state 136
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 72

    (12) statement -> function_call M_QUAD .

    ELSE            reduce using rule 12 (statement -> function_call M_QUAD .)
    FOREACH         reduce using rule 12 (statement -> function_call M_QUAD .)
    MY              reduce using rule 12 (statement -> function_call M_QUAD .)
    SCALAR_VARIABLE reduce using rule 12 (statement -> function_call M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 12 (statement -> function_call M_QUAD .)
    HASH_VARIABLE   reduce using rule 12 (statement -> function_call M_QUAD .)
    BREAK           reduce using rule 12 (statement -> function_call M_QUAD .)
    CONTINUE        reduce using rule 12 (statement -> function_call M_QUAD .)
    PRINT           reduce using rule 12 (statement -> function_call M_QUAD .)
    RETURN          reduce using rule 12 (statement -> function_call M_QUAD .)
    DIE             reduce using rule 12 (statement -> function_call M_QUAD .)
    CHOMP           reduce using rule 12 (statement -> function_call M_QUAD .)
    MINUS           reduce using rule 12 (statement -> function_call M_QUAD .)
    INCREAMENT      reduce using rule 12 (statement -> function_call M_QUAD .)
    DCREAMENT       reduce using rule 12 (statement -> function_call M_QUAD .)
    NOT             reduce using rule 12 (statement -> function_call M_QUAD .)
    LPAR            reduce using rule 12 (statement -> function_call M_QUAD .)
    INPUT           reduce using rule 12 (statement -> function_call M_QUAD .)
    USE             reduce using rule 12 (statement -> function_call M_QUAD .)
    WHILE           reduce using rule 12 (statement -> function_call M_QUAD .)
    DO              reduce using rule 12 (statement -> function_call M_QUAD .)
    FOR             reduce using rule 12 (statement -> function_call M_QUAD .)
    SWITCH          reduce using rule 12 (statement -> function_call M_QUAD .)
    IF              reduce using rule 12 (statement -> function_call M_QUAD .)
    IDENTIFIER      reduce using rule 12 (statement -> function_call M_QUAD .)
    INTEGER         reduce using rule 12 (statement -> function_call M_QUAD .)
    FLOAT           reduce using rule 12 (statement -> function_call M_QUAD .)
    HEXADECIMAL     reduce using rule 12 (statement -> function_call M_QUAD .)
    OCTAL           reduce using rule 12 (statement -> function_call M_QUAD .)
    BINARY          reduce using rule 12 (statement -> function_call M_QUAD .)
    EXPONANTIAL     reduce using rule 12 (statement -> function_call M_QUAD .)
    STRING          reduce using rule 12 (statement -> function_call M_QUAD .)
    PSEUDO_STRING   reduce using rule 12 (statement -> function_call M_QUAD .)
    SUB             reduce using rule 12 (statement -> function_call M_QUAD .)
    $end            reduce using rule 12 (statement -> function_call M_QUAD .)
    BLOCK_END       reduce using rule 12 (statement -> function_call M_QUAD .)


state 73

    (106) print -> PRINT printlist . SEMICOLON

    SEMICOLON       shift and go to state 137


state 74

    (108) printlist -> expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       reduce using rule 108 (printlist -> expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 75

    (24) statement -> switch_statement M_QUAD .

    ELSE            reduce using rule 24 (statement -> switch_statement M_QUAD .)
    FOREACH         reduce using rule 24 (statement -> switch_statement M_QUAD .)
    MY              reduce using rule 24 (statement -> switch_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 24 (statement -> switch_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 24 (statement -> switch_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 24 (statement -> switch_statement M_QUAD .)
    BREAK           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    CONTINUE        reduce using rule 24 (statement -> switch_statement M_QUAD .)
    PRINT           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    RETURN          reduce using rule 24 (statement -> switch_statement M_QUAD .)
    DIE             reduce using rule 24 (statement -> switch_statement M_QUAD .)
    CHOMP           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    MINUS           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    INCREAMENT      reduce using rule 24 (statement -> switch_statement M_QUAD .)
    DCREAMENT       reduce using rule 24 (statement -> switch_statement M_QUAD .)
    NOT             reduce using rule 24 (statement -> switch_statement M_QUAD .)
    LPAR            reduce using rule 24 (statement -> switch_statement M_QUAD .)
    INPUT           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    USE             reduce using rule 24 (statement -> switch_statement M_QUAD .)
    WHILE           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    DO              reduce using rule 24 (statement -> switch_statement M_QUAD .)
    FOR             reduce using rule 24 (statement -> switch_statement M_QUAD .)
    SWITCH          reduce using rule 24 (statement -> switch_statement M_QUAD .)
    IF              reduce using rule 24 (statement -> switch_statement M_QUAD .)
    IDENTIFIER      reduce using rule 24 (statement -> switch_statement M_QUAD .)
    INTEGER         reduce using rule 24 (statement -> switch_statement M_QUAD .)
    FLOAT           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 24 (statement -> switch_statement M_QUAD .)
    OCTAL           reduce using rule 24 (statement -> switch_statement M_QUAD .)
    BINARY          reduce using rule 24 (statement -> switch_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 24 (statement -> switch_statement M_QUAD .)
    STRING          reduce using rule 24 (statement -> switch_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 24 (statement -> switch_statement M_QUAD .)
    SUB             reduce using rule 24 (statement -> switch_statement M_QUAD .)
    $end            reduce using rule 24 (statement -> switch_statement M_QUAD .)
    BLOCK_END       reduce using rule 24 (statement -> switch_statement M_QUAD .)


state 76

    (22) statement -> do_while_statement M_QUAD .

    ELSE            reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    FOREACH         reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    MY              reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    BREAK           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    CONTINUE        reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    PRINT           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    RETURN          reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    DIE             reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    CHOMP           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    MINUS           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    INCREAMENT      reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    DCREAMENT       reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    NOT             reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    LPAR            reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    INPUT           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    USE             reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    WHILE           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    DO              reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    FOR             reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    SWITCH          reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    IF              reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    IDENTIFIER      reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    INTEGER         reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    FLOAT           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    OCTAL           reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    BINARY          reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    STRING          reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    SUB             reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    $end            reduce using rule 22 (statement -> do_while_statement M_QUAD .)
    BLOCK_END       reduce using rule 22 (statement -> do_while_statement M_QUAD .)


state 77

    (26) statement -> ifelse_statement M_QUAD .

    ELSE            reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    FOREACH         reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    MY              reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    BREAK           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    CONTINUE        reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    PRINT           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    RETURN          reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    DIE             reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    CHOMP           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    MINUS           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    INCREAMENT      reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    DCREAMENT       reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    NOT             reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    LPAR            reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    INPUT           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    USE             reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    WHILE           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    DO              reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    FOR             reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    SWITCH          reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    IF              reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    IDENTIFIER      reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    INTEGER         reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    FLOAT           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    OCTAL           reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    BINARY          reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    STRING          reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    SUB             reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    $end            reduce using rule 26 (statement -> ifelse_statement M_QUAD .)
    BLOCK_END       reduce using rule 26 (statement -> ifelse_statement M_QUAD .)


state 78

    (14) statement -> continue M_QUAD .

    ELSE            reduce using rule 14 (statement -> continue M_QUAD .)
    FOREACH         reduce using rule 14 (statement -> continue M_QUAD .)
    MY              reduce using rule 14 (statement -> continue M_QUAD .)
    SCALAR_VARIABLE reduce using rule 14 (statement -> continue M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 14 (statement -> continue M_QUAD .)
    HASH_VARIABLE   reduce using rule 14 (statement -> continue M_QUAD .)
    BREAK           reduce using rule 14 (statement -> continue M_QUAD .)
    CONTINUE        reduce using rule 14 (statement -> continue M_QUAD .)
    PRINT           reduce using rule 14 (statement -> continue M_QUAD .)
    RETURN          reduce using rule 14 (statement -> continue M_QUAD .)
    DIE             reduce using rule 14 (statement -> continue M_QUAD .)
    CHOMP           reduce using rule 14 (statement -> continue M_QUAD .)
    MINUS           reduce using rule 14 (statement -> continue M_QUAD .)
    INCREAMENT      reduce using rule 14 (statement -> continue M_QUAD .)
    DCREAMENT       reduce using rule 14 (statement -> continue M_QUAD .)
    NOT             reduce using rule 14 (statement -> continue M_QUAD .)
    LPAR            reduce using rule 14 (statement -> continue M_QUAD .)
    INPUT           reduce using rule 14 (statement -> continue M_QUAD .)
    USE             reduce using rule 14 (statement -> continue M_QUAD .)
    WHILE           reduce using rule 14 (statement -> continue M_QUAD .)
    DO              reduce using rule 14 (statement -> continue M_QUAD .)
    FOR             reduce using rule 14 (statement -> continue M_QUAD .)
    SWITCH          reduce using rule 14 (statement -> continue M_QUAD .)
    IF              reduce using rule 14 (statement -> continue M_QUAD .)
    IDENTIFIER      reduce using rule 14 (statement -> continue M_QUAD .)
    INTEGER         reduce using rule 14 (statement -> continue M_QUAD .)
    FLOAT           reduce using rule 14 (statement -> continue M_QUAD .)
    HEXADECIMAL     reduce using rule 14 (statement -> continue M_QUAD .)
    OCTAL           reduce using rule 14 (statement -> continue M_QUAD .)
    BINARY          reduce using rule 14 (statement -> continue M_QUAD .)
    EXPONANTIAL     reduce using rule 14 (statement -> continue M_QUAD .)
    STRING          reduce using rule 14 (statement -> continue M_QUAD .)
    PSEUDO_STRING   reduce using rule 14 (statement -> continue M_QUAD .)
    SUB             reduce using rule 14 (statement -> continue M_QUAD .)
    $end            reduce using rule 14 (statement -> continue M_QUAD .)
    BLOCK_END       reduce using rule 14 (statement -> continue M_QUAD .)


state 79

    (15) statement -> print M_QUAD .

    ELSE            reduce using rule 15 (statement -> print M_QUAD .)
    FOREACH         reduce using rule 15 (statement -> print M_QUAD .)
    MY              reduce using rule 15 (statement -> print M_QUAD .)
    SCALAR_VARIABLE reduce using rule 15 (statement -> print M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 15 (statement -> print M_QUAD .)
    HASH_VARIABLE   reduce using rule 15 (statement -> print M_QUAD .)
    BREAK           reduce using rule 15 (statement -> print M_QUAD .)
    CONTINUE        reduce using rule 15 (statement -> print M_QUAD .)
    PRINT           reduce using rule 15 (statement -> print M_QUAD .)
    RETURN          reduce using rule 15 (statement -> print M_QUAD .)
    DIE             reduce using rule 15 (statement -> print M_QUAD .)
    CHOMP           reduce using rule 15 (statement -> print M_QUAD .)
    MINUS           reduce using rule 15 (statement -> print M_QUAD .)
    INCREAMENT      reduce using rule 15 (statement -> print M_QUAD .)
    DCREAMENT       reduce using rule 15 (statement -> print M_QUAD .)
    NOT             reduce using rule 15 (statement -> print M_QUAD .)
    LPAR            reduce using rule 15 (statement -> print M_QUAD .)
    INPUT           reduce using rule 15 (statement -> print M_QUAD .)
    USE             reduce using rule 15 (statement -> print M_QUAD .)
    WHILE           reduce using rule 15 (statement -> print M_QUAD .)
    DO              reduce using rule 15 (statement -> print M_QUAD .)
    FOR             reduce using rule 15 (statement -> print M_QUAD .)
    SWITCH          reduce using rule 15 (statement -> print M_QUAD .)
    IF              reduce using rule 15 (statement -> print M_QUAD .)
    IDENTIFIER      reduce using rule 15 (statement -> print M_QUAD .)
    INTEGER         reduce using rule 15 (statement -> print M_QUAD .)
    FLOAT           reduce using rule 15 (statement -> print M_QUAD .)
    HEXADECIMAL     reduce using rule 15 (statement -> print M_QUAD .)
    OCTAL           reduce using rule 15 (statement -> print M_QUAD .)
    BINARY          reduce using rule 15 (statement -> print M_QUAD .)
    EXPONANTIAL     reduce using rule 15 (statement -> print M_QUAD .)
    STRING          reduce using rule 15 (statement -> print M_QUAD .)
    PSEUDO_STRING   reduce using rule 15 (statement -> print M_QUAD .)
    SUB             reduce using rule 15 (statement -> print M_QUAD .)
    $end            reduce using rule 15 (statement -> print M_QUAD .)
    BLOCK_END       reduce using rule 15 (statement -> print M_QUAD .)


state 80

    (44) for_statement -> FOR LPAR . assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR . assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON

    MY              shift and go to state 140
    SCALAR_VARIABLE shift and go to state 139
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25

    assignment                     shift and go to state 138

state 81

    (77) assignment -> HASH_VARIABLE ASSIGNMENT . LPAR hashList RPAR SEMICOLON

    LPAR            shift and go to state 141


state 82

    (73) assignment -> SCALAR_VARIABLE ASSIGNMENT . expression SEMICOLON
    (74) assignment -> SCALAR_VARIABLE ASSIGNMENT . function_call SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING
    (92) function_name -> . IDENTIFIER

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28
    IDENTIFIER      shift and go to state 43

    constant                       shift and go to state 51
    function_call                  shift and go to state 142
    expression                     shift and go to state 143
    function_name                  shift and go to state 44

state 83

    (75) assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT . function_call SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (92) function_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 43

    function_call                  shift and go to state 144
    function_name                  shift and go to state 44

state 84

    (99) continue -> CONTINUE SEMICOLON .

    ELSE            reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    MY              reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    PRINT           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    DIE             reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    CHOMP           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    INCREAMENT      reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    DCREAMENT       reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    LPAR            reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    INPUT           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    USE             reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    DO              reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    IF              reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    INTEGER         reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    HEXADECIMAL     reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    OCTAL           reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    BINARY          reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    EXPONANTIAL     reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    SUB             reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    $end            reduce using rule 99 (continue -> CONTINUE SEMICOLON .)
    BLOCK_END       reduce using rule 99 (continue -> CONTINUE SEMICOLON .)


state 85

    (132) expression -> NOT expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 132 (expression -> NOT expression .)
    DCREAMENT       reduce using rule 132 (expression -> NOT expression .)
    PLUS            reduce using rule 132 (expression -> NOT expression .)
    MINUS           reduce using rule 132 (expression -> NOT expression .)
    MULTIPLY        reduce using rule 132 (expression -> NOT expression .)
    DIVIDE          reduce using rule 132 (expression -> NOT expression .)
    MODULUS         reduce using rule 132 (expression -> NOT expression .)
    EXPONENT        reduce using rule 132 (expression -> NOT expression .)
    Q_MARK          reduce using rule 132 (expression -> NOT expression .)
    OP_GREATER_THAN reduce using rule 132 (expression -> NOT expression .)
    OP_GREATER_THAN_E reduce using rule 132 (expression -> NOT expression .)
    OP_LESS_THAN    reduce using rule 132 (expression -> NOT expression .)
    OP_LESS_THAN_E  reduce using rule 132 (expression -> NOT expression .)
    EQUAL           reduce using rule 132 (expression -> NOT expression .)
    NOT_EQUAL       reduce using rule 132 (expression -> NOT expression .)
    STRING_CMP      reduce using rule 132 (expression -> NOT expression .)
    AND             reduce using rule 132 (expression -> NOT expression .)
    OR              reduce using rule 132 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 132 (expression -> NOT expression .)
    RPAR            reduce using rule 132 (expression -> NOT expression .)
    COMMA           reduce using rule 132 (expression -> NOT expression .)
    COLON           reduce using rule 132 (expression -> NOT expression .)
    BLOCK_BEGIN     reduce using rule 132 (expression -> NOT expression .)

  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MODULUS         [ shift and go to state 128 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 86

    (71) assignment -> MY HASH_VARIABLE . ASSIGNMENT LPAR hashList RPAR SEMICOLON

    ASSIGNMENT      shift and go to state 145


state 87

    (70) assignment -> MY SCALAR_VARIABLE . ASSIGNMENT expression SEMICOLON
    (72) assignment -> MY SCALAR_VARIABLE . ASSIGNMENT function_call SEMICOLON
    (89) declaration -> MY SCALAR_VARIABLE . SEMICOLON

    ASSIGNMENT      shift and go to state 147
    SEMICOLON       shift and go to state 146


state 88

    (66) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT array SEMICOLON
    (67) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (90) declaration -> MY ARRAY_VARIABLE . SEMICOLON

    ASSIGNMENT      shift and go to state 149
    SEMICOLON       shift and go to state 148


state 89

    (2) segments -> statements_subroutine segments .

    $end            reduce using rule 2 (segments -> statements_subroutine segments .)


state 90

    (3) segments -> statements_subroutine M_segments .

    $end            reduce using rule 3 (segments -> statements_subroutine M_segments .)


state 91

    (6) M_segments -> epsilon .

    $end            reduce using rule 6 (M_segments -> epsilon .)


state 92

    (104) marker -> epsilon .

    IDENTIFIER      reduce using rule 104 (marker -> epsilon .)


state 93

    (101) subroutine -> SUB marker . identifier M_sub block marker1
    (103) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 150

    identifier                     shift and go to state 151

state 94

    (43) do_while_statement -> DO M_QUAD . block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END

    BLOCK_BEGIN     shift and go to state 152

    block                          shift and go to state 153

state 95

    (40) while_statement -> WHILE M_QUAD . LPAR expression RPAR M_whileBranch block_or_statement

    LPAR            shift and go to state 154


state 96

    (76) assignment -> ARRAY_VARIABLE ASSIGNMENT . array SEMICOLON
    (78) assignment -> ARRAY_VARIABLE ASSIGNMENT . KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> ARRAY_VARIABLE ASSIGNMENT . VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT . LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (81) array -> . ARRAY_VARIABLE
    (82) array -> . LPAR arrayList RPAR

    KEYS            shift and go to state 156
    VALUES          shift and go to state 157
    LPAR            shift and go to state 155
    ARRAY_VARIABLE  shift and go to state 158

    array                          shift and go to state 159

state 97

    (20) statement -> use M_QUAD .

    ELSE            reduce using rule 20 (statement -> use M_QUAD .)
    FOREACH         reduce using rule 20 (statement -> use M_QUAD .)
    MY              reduce using rule 20 (statement -> use M_QUAD .)
    SCALAR_VARIABLE reduce using rule 20 (statement -> use M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 20 (statement -> use M_QUAD .)
    HASH_VARIABLE   reduce using rule 20 (statement -> use M_QUAD .)
    BREAK           reduce using rule 20 (statement -> use M_QUAD .)
    CONTINUE        reduce using rule 20 (statement -> use M_QUAD .)
    PRINT           reduce using rule 20 (statement -> use M_QUAD .)
    RETURN          reduce using rule 20 (statement -> use M_QUAD .)
    DIE             reduce using rule 20 (statement -> use M_QUAD .)
    CHOMP           reduce using rule 20 (statement -> use M_QUAD .)
    MINUS           reduce using rule 20 (statement -> use M_QUAD .)
    INCREAMENT      reduce using rule 20 (statement -> use M_QUAD .)
    DCREAMENT       reduce using rule 20 (statement -> use M_QUAD .)
    NOT             reduce using rule 20 (statement -> use M_QUAD .)
    LPAR            reduce using rule 20 (statement -> use M_QUAD .)
    INPUT           reduce using rule 20 (statement -> use M_QUAD .)
    USE             reduce using rule 20 (statement -> use M_QUAD .)
    WHILE           reduce using rule 20 (statement -> use M_QUAD .)
    DO              reduce using rule 20 (statement -> use M_QUAD .)
    FOR             reduce using rule 20 (statement -> use M_QUAD .)
    SWITCH          reduce using rule 20 (statement -> use M_QUAD .)
    IF              reduce using rule 20 (statement -> use M_QUAD .)
    IDENTIFIER      reduce using rule 20 (statement -> use M_QUAD .)
    INTEGER         reduce using rule 20 (statement -> use M_QUAD .)
    FLOAT           reduce using rule 20 (statement -> use M_QUAD .)
    HEXADECIMAL     reduce using rule 20 (statement -> use M_QUAD .)
    OCTAL           reduce using rule 20 (statement -> use M_QUAD .)
    BINARY          reduce using rule 20 (statement -> use M_QUAD .)
    EXPONANTIAL     reduce using rule 20 (statement -> use M_QUAD .)
    STRING          reduce using rule 20 (statement -> use M_QUAD .)
    PSEUDO_STRING   reduce using rule 20 (statement -> use M_QUAD .)
    SUB             reduce using rule 20 (statement -> use M_QUAD .)
    $end            reduce using rule 20 (statement -> use M_QUAD .)
    BLOCK_END       reduce using rule 20 (statement -> use M_QUAD .)


state 98

    (110) expression -> INCREAMENT expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

  ! shift/reduce conflict for INCREAMENT resolved as shift
  ! shift/reduce conflict for DCREAMENT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for Q_MARK resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN_E resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN_E resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for STRING_CMP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 110 (expression -> INCREAMENT expression .)
    RPAR            reduce using rule 110 (expression -> INCREAMENT expression .)
    COMMA           reduce using rule 110 (expression -> INCREAMENT expression .)
    COLON           reduce using rule 110 (expression -> INCREAMENT expression .)
    BLOCK_BEGIN     reduce using rule 110 (expression -> INCREAMENT expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132

  ! INCREAMENT      [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! DCREAMENT       [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! PLUS            [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! MINUS           [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! MULTIPLY        [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! DIVIDE          [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! MODULUS         [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! EXPONENT        [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! Q_MARK          [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! EQUAL           [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! NOT_EQUAL       [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! STRING_CMP      [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! AND             [ reduce using rule 110 (expression -> INCREAMENT expression .) ]
  ! OR              [ reduce using rule 110 (expression -> INCREAMENT expression .) ]


state 99

    (59) switch_statement -> SWITCH LPAR . SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END

    SCALAR_VARIABLE shift and go to state 160


state 100

    (8) statements -> statement statements .

    BLOCK_END       reduce using rule 8 (statements -> statement statements .)
    SUB             reduce using rule 8 (statements -> statement statements .)
    FOREACH         reduce using rule 8 (statements -> statement statements .)
    MY              reduce using rule 8 (statements -> statement statements .)
    SCALAR_VARIABLE reduce using rule 8 (statements -> statement statements .)
    ARRAY_VARIABLE  reduce using rule 8 (statements -> statement statements .)
    HASH_VARIABLE   reduce using rule 8 (statements -> statement statements .)
    BREAK           reduce using rule 8 (statements -> statement statements .)
    CONTINUE        reduce using rule 8 (statements -> statement statements .)
    PRINT           reduce using rule 8 (statements -> statement statements .)
    RETURN          reduce using rule 8 (statements -> statement statements .)
    DIE             reduce using rule 8 (statements -> statement statements .)
    CHOMP           reduce using rule 8 (statements -> statement statements .)
    MINUS           reduce using rule 8 (statements -> statement statements .)
    INCREAMENT      reduce using rule 8 (statements -> statement statements .)
    DCREAMENT       reduce using rule 8 (statements -> statement statements .)
    NOT             reduce using rule 8 (statements -> statement statements .)
    LPAR            reduce using rule 8 (statements -> statement statements .)
    INPUT           reduce using rule 8 (statements -> statement statements .)
    USE             reduce using rule 8 (statements -> statement statements .)
    WHILE           reduce using rule 8 (statements -> statement statements .)
    DO              reduce using rule 8 (statements -> statement statements .)
    FOR             reduce using rule 8 (statements -> statement statements .)
    SWITCH          reduce using rule 8 (statements -> statement statements .)
    IF              reduce using rule 8 (statements -> statement statements .)
    IDENTIFIER      reduce using rule 8 (statements -> statement statements .)
    INTEGER         reduce using rule 8 (statements -> statement statements .)
    FLOAT           reduce using rule 8 (statements -> statement statements .)
    HEXADECIMAL     reduce using rule 8 (statements -> statement statements .)
    OCTAL           reduce using rule 8 (statements -> statement statements .)
    BINARY          reduce using rule 8 (statements -> statement statements .)
    EXPONANTIAL     reduce using rule 8 (statements -> statement statements .)
    STRING          reduce using rule 8 (statements -> statement statements .)
    PSEUDO_STRING   reduce using rule 8 (statements -> statement statements .)
    $end            reduce using rule 8 (statements -> statement statements .)


state 101

    (146) M_STATEMENTS -> epsilon .

    SUB             reduce using rule 146 (M_STATEMENTS -> epsilon .)
    FOREACH         reduce using rule 146 (M_STATEMENTS -> epsilon .)
    MY              reduce using rule 146 (M_STATEMENTS -> epsilon .)
    SCALAR_VARIABLE reduce using rule 146 (M_STATEMENTS -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 146 (M_STATEMENTS -> epsilon .)
    HASH_VARIABLE   reduce using rule 146 (M_STATEMENTS -> epsilon .)
    BREAK           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    CONTINUE        reduce using rule 146 (M_STATEMENTS -> epsilon .)
    PRINT           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    RETURN          reduce using rule 146 (M_STATEMENTS -> epsilon .)
    DIE             reduce using rule 146 (M_STATEMENTS -> epsilon .)
    CHOMP           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    MINUS           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    INCREAMENT      reduce using rule 146 (M_STATEMENTS -> epsilon .)
    DCREAMENT       reduce using rule 146 (M_STATEMENTS -> epsilon .)
    NOT             reduce using rule 146 (M_STATEMENTS -> epsilon .)
    LPAR            reduce using rule 146 (M_STATEMENTS -> epsilon .)
    INPUT           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    USE             reduce using rule 146 (M_STATEMENTS -> epsilon .)
    WHILE           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    DO              reduce using rule 146 (M_STATEMENTS -> epsilon .)
    FOR             reduce using rule 146 (M_STATEMENTS -> epsilon .)
    SWITCH          reduce using rule 146 (M_STATEMENTS -> epsilon .)
    IF              reduce using rule 146 (M_STATEMENTS -> epsilon .)
    IDENTIFIER      reduce using rule 146 (M_STATEMENTS -> epsilon .)
    INTEGER         reduce using rule 146 (M_STATEMENTS -> epsilon .)
    FLOAT           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    HEXADECIMAL     reduce using rule 146 (M_STATEMENTS -> epsilon .)
    OCTAL           reduce using rule 146 (M_STATEMENTS -> epsilon .)
    BINARY          reduce using rule 146 (M_STATEMENTS -> epsilon .)
    EXPONANTIAL     reduce using rule 146 (M_STATEMENTS -> epsilon .)
    STRING          reduce using rule 146 (M_STATEMENTS -> epsilon .)
    PSEUDO_STRING   reduce using rule 146 (M_STATEMENTS -> epsilon .)
    $end            reduce using rule 146 (M_STATEMENTS -> epsilon .)
    BLOCK_END       reduce using rule 146 (M_STATEMENTS -> epsilon .)


state 102

    (9) statements -> statement M_STATEMENTS .

    BLOCK_END       reduce using rule 9 (statements -> statement M_STATEMENTS .)
    SUB             reduce using rule 9 (statements -> statement M_STATEMENTS .)
    FOREACH         reduce using rule 9 (statements -> statement M_STATEMENTS .)
    MY              reduce using rule 9 (statements -> statement M_STATEMENTS .)
    SCALAR_VARIABLE reduce using rule 9 (statements -> statement M_STATEMENTS .)
    ARRAY_VARIABLE  reduce using rule 9 (statements -> statement M_STATEMENTS .)
    HASH_VARIABLE   reduce using rule 9 (statements -> statement M_STATEMENTS .)
    BREAK           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    CONTINUE        reduce using rule 9 (statements -> statement M_STATEMENTS .)
    PRINT           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    RETURN          reduce using rule 9 (statements -> statement M_STATEMENTS .)
    DIE             reduce using rule 9 (statements -> statement M_STATEMENTS .)
    CHOMP           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    MINUS           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    INCREAMENT      reduce using rule 9 (statements -> statement M_STATEMENTS .)
    DCREAMENT       reduce using rule 9 (statements -> statement M_STATEMENTS .)
    NOT             reduce using rule 9 (statements -> statement M_STATEMENTS .)
    LPAR            reduce using rule 9 (statements -> statement M_STATEMENTS .)
    INPUT           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    USE             reduce using rule 9 (statements -> statement M_STATEMENTS .)
    WHILE           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    DO              reduce using rule 9 (statements -> statement M_STATEMENTS .)
    FOR             reduce using rule 9 (statements -> statement M_STATEMENTS .)
    SWITCH          reduce using rule 9 (statements -> statement M_STATEMENTS .)
    IF              reduce using rule 9 (statements -> statement M_STATEMENTS .)
    IDENTIFIER      reduce using rule 9 (statements -> statement M_STATEMENTS .)
    INTEGER         reduce using rule 9 (statements -> statement M_STATEMENTS .)
    FLOAT           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    HEXADECIMAL     reduce using rule 9 (statements -> statement M_STATEMENTS .)
    OCTAL           reduce using rule 9 (statements -> statement M_STATEMENTS .)
    BINARY          reduce using rule 9 (statements -> statement M_STATEMENTS .)
    EXPONANTIAL     reduce using rule 9 (statements -> statement M_STATEMENTS .)
    STRING          reduce using rule 9 (statements -> statement M_STATEMENTS .)
    PSEUDO_STRING   reduce using rule 9 (statements -> statement M_STATEMENTS .)
    $end            reduce using rule 9 (statements -> statement M_STATEMENTS .)


state 103

    (91) function_call -> function_name LPAR . argumentList RPAR SEMICOLON
    (93) argumentList -> . epsilon
    (94) argumentList -> . expression arguments
    (147) epsilon -> .
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    RPAR            reduce using rule 147 (epsilon -> .)
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    argumentList                   shift and go to state 161
    constant                       shift and go to state 51
    epsilon                        shift and go to state 162
    expression                     shift and go to state 163

state 104

    (18) statement -> chomp M_QUAD .

    ELSE            reduce using rule 18 (statement -> chomp M_QUAD .)
    FOREACH         reduce using rule 18 (statement -> chomp M_QUAD .)
    MY              reduce using rule 18 (statement -> chomp M_QUAD .)
    SCALAR_VARIABLE reduce using rule 18 (statement -> chomp M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 18 (statement -> chomp M_QUAD .)
    HASH_VARIABLE   reduce using rule 18 (statement -> chomp M_QUAD .)
    BREAK           reduce using rule 18 (statement -> chomp M_QUAD .)
    CONTINUE        reduce using rule 18 (statement -> chomp M_QUAD .)
    PRINT           reduce using rule 18 (statement -> chomp M_QUAD .)
    RETURN          reduce using rule 18 (statement -> chomp M_QUAD .)
    DIE             reduce using rule 18 (statement -> chomp M_QUAD .)
    CHOMP           reduce using rule 18 (statement -> chomp M_QUAD .)
    MINUS           reduce using rule 18 (statement -> chomp M_QUAD .)
    INCREAMENT      reduce using rule 18 (statement -> chomp M_QUAD .)
    DCREAMENT       reduce using rule 18 (statement -> chomp M_QUAD .)
    NOT             reduce using rule 18 (statement -> chomp M_QUAD .)
    LPAR            reduce using rule 18 (statement -> chomp M_QUAD .)
    INPUT           reduce using rule 18 (statement -> chomp M_QUAD .)
    USE             reduce using rule 18 (statement -> chomp M_QUAD .)
    WHILE           reduce using rule 18 (statement -> chomp M_QUAD .)
    DO              reduce using rule 18 (statement -> chomp M_QUAD .)
    FOR             reduce using rule 18 (statement -> chomp M_QUAD .)
    SWITCH          reduce using rule 18 (statement -> chomp M_QUAD .)
    IF              reduce using rule 18 (statement -> chomp M_QUAD .)
    IDENTIFIER      reduce using rule 18 (statement -> chomp M_QUAD .)
    INTEGER         reduce using rule 18 (statement -> chomp M_QUAD .)
    FLOAT           reduce using rule 18 (statement -> chomp M_QUAD .)
    HEXADECIMAL     reduce using rule 18 (statement -> chomp M_QUAD .)
    OCTAL           reduce using rule 18 (statement -> chomp M_QUAD .)
    BINARY          reduce using rule 18 (statement -> chomp M_QUAD .)
    EXPONANTIAL     reduce using rule 18 (statement -> chomp M_QUAD .)
    STRING          reduce using rule 18 (statement -> chomp M_QUAD .)
    PSEUDO_STRING   reduce using rule 18 (statement -> chomp M_QUAD .)
    SUB             reduce using rule 18 (statement -> chomp M_QUAD .)
    $end            reduce using rule 18 (statement -> chomp M_QUAD .)
    BLOCK_END       reduce using rule 18 (statement -> chomp M_QUAD .)


state 105

    (11) statement -> declaration M_QUAD .

    ELSE            reduce using rule 11 (statement -> declaration M_QUAD .)
    FOREACH         reduce using rule 11 (statement -> declaration M_QUAD .)
    MY              reduce using rule 11 (statement -> declaration M_QUAD .)
    SCALAR_VARIABLE reduce using rule 11 (statement -> declaration M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 11 (statement -> declaration M_QUAD .)
    HASH_VARIABLE   reduce using rule 11 (statement -> declaration M_QUAD .)
    BREAK           reduce using rule 11 (statement -> declaration M_QUAD .)
    CONTINUE        reduce using rule 11 (statement -> declaration M_QUAD .)
    PRINT           reduce using rule 11 (statement -> declaration M_QUAD .)
    RETURN          reduce using rule 11 (statement -> declaration M_QUAD .)
    DIE             reduce using rule 11 (statement -> declaration M_QUAD .)
    CHOMP           reduce using rule 11 (statement -> declaration M_QUAD .)
    MINUS           reduce using rule 11 (statement -> declaration M_QUAD .)
    INCREAMENT      reduce using rule 11 (statement -> declaration M_QUAD .)
    DCREAMENT       reduce using rule 11 (statement -> declaration M_QUAD .)
    NOT             reduce using rule 11 (statement -> declaration M_QUAD .)
    LPAR            reduce using rule 11 (statement -> declaration M_QUAD .)
    INPUT           reduce using rule 11 (statement -> declaration M_QUAD .)
    USE             reduce using rule 11 (statement -> declaration M_QUAD .)
    WHILE           reduce using rule 11 (statement -> declaration M_QUAD .)
    DO              reduce using rule 11 (statement -> declaration M_QUAD .)
    FOR             reduce using rule 11 (statement -> declaration M_QUAD .)
    SWITCH          reduce using rule 11 (statement -> declaration M_QUAD .)
    IF              reduce using rule 11 (statement -> declaration M_QUAD .)
    IDENTIFIER      reduce using rule 11 (statement -> declaration M_QUAD .)
    INTEGER         reduce using rule 11 (statement -> declaration M_QUAD .)
    FLOAT           reduce using rule 11 (statement -> declaration M_QUAD .)
    HEXADECIMAL     reduce using rule 11 (statement -> declaration M_QUAD .)
    OCTAL           reduce using rule 11 (statement -> declaration M_QUAD .)
    BINARY          reduce using rule 11 (statement -> declaration M_QUAD .)
    EXPONANTIAL     reduce using rule 11 (statement -> declaration M_QUAD .)
    STRING          reduce using rule 11 (statement -> declaration M_QUAD .)
    PSEUDO_STRING   reduce using rule 11 (statement -> declaration M_QUAD .)
    SUB             reduce using rule 11 (statement -> declaration M_QUAD .)
    $end            reduce using rule 11 (statement -> declaration M_QUAD .)
    BLOCK_END       reduce using rule 11 (statement -> declaration M_QUAD .)


state 106

    (100) chomp -> CHOMP expression . SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       shift and go to state 164
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 107

    (98) break -> BREAK SEMICOLON .

    ELSE            reduce using rule 98 (break -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 98 (break -> BREAK SEMICOLON .)
    MY              reduce using rule 98 (break -> BREAK SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 98 (break -> BREAK SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 98 (break -> BREAK SEMICOLON .)
    HASH_VARIABLE   reduce using rule 98 (break -> BREAK SEMICOLON .)
    BREAK           reduce using rule 98 (break -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 98 (break -> BREAK SEMICOLON .)
    PRINT           reduce using rule 98 (break -> BREAK SEMICOLON .)
    RETURN          reduce using rule 98 (break -> BREAK SEMICOLON .)
    DIE             reduce using rule 98 (break -> BREAK SEMICOLON .)
    CHOMP           reduce using rule 98 (break -> BREAK SEMICOLON .)
    MINUS           reduce using rule 98 (break -> BREAK SEMICOLON .)
    INCREAMENT      reduce using rule 98 (break -> BREAK SEMICOLON .)
    DCREAMENT       reduce using rule 98 (break -> BREAK SEMICOLON .)
    NOT             reduce using rule 98 (break -> BREAK SEMICOLON .)
    LPAR            reduce using rule 98 (break -> BREAK SEMICOLON .)
    INPUT           reduce using rule 98 (break -> BREAK SEMICOLON .)
    USE             reduce using rule 98 (break -> BREAK SEMICOLON .)
    WHILE           reduce using rule 98 (break -> BREAK SEMICOLON .)
    DO              reduce using rule 98 (break -> BREAK SEMICOLON .)
    FOR             reduce using rule 98 (break -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 98 (break -> BREAK SEMICOLON .)
    IF              reduce using rule 98 (break -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 98 (break -> BREAK SEMICOLON .)
    INTEGER         reduce using rule 98 (break -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 98 (break -> BREAK SEMICOLON .)
    HEXADECIMAL     reduce using rule 98 (break -> BREAK SEMICOLON .)
    OCTAL           reduce using rule 98 (break -> BREAK SEMICOLON .)
    BINARY          reduce using rule 98 (break -> BREAK SEMICOLON .)
    EXPONANTIAL     reduce using rule 98 (break -> BREAK SEMICOLON .)
    STRING          reduce using rule 98 (break -> BREAK SEMICOLON .)
    PSEUDO_STRING   reduce using rule 98 (break -> BREAK SEMICOLON .)
    SUB             reduce using rule 98 (break -> BREAK SEMICOLON .)
    $end            reduce using rule 98 (break -> BREAK SEMICOLON .)
    BLOCK_END       reduce using rule 98 (break -> BREAK SEMICOLON .)


state 108

    (27) use -> USE STRICT . SEMICOLON

    SEMICOLON       shift and go to state 165


state 109

    (28) use -> USE WARNINGS . SEMICOLON

    SEMICOLON       shift and go to state 166


state 110

    (107) die -> DIE printlist . SEMICOLON

    SEMICOLON       shift and go to state 167


state 111

    (25) statement -> if_statement M_QUAD .

    ELSE            reduce using rule 25 (statement -> if_statement M_QUAD .)
    FOREACH         reduce using rule 25 (statement -> if_statement M_QUAD .)
    MY              reduce using rule 25 (statement -> if_statement M_QUAD .)
    SCALAR_VARIABLE reduce using rule 25 (statement -> if_statement M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 25 (statement -> if_statement M_QUAD .)
    HASH_VARIABLE   reduce using rule 25 (statement -> if_statement M_QUAD .)
    BREAK           reduce using rule 25 (statement -> if_statement M_QUAD .)
    CONTINUE        reduce using rule 25 (statement -> if_statement M_QUAD .)
    PRINT           reduce using rule 25 (statement -> if_statement M_QUAD .)
    RETURN          reduce using rule 25 (statement -> if_statement M_QUAD .)
    DIE             reduce using rule 25 (statement -> if_statement M_QUAD .)
    CHOMP           reduce using rule 25 (statement -> if_statement M_QUAD .)
    MINUS           reduce using rule 25 (statement -> if_statement M_QUAD .)
    INCREAMENT      reduce using rule 25 (statement -> if_statement M_QUAD .)
    DCREAMENT       reduce using rule 25 (statement -> if_statement M_QUAD .)
    NOT             reduce using rule 25 (statement -> if_statement M_QUAD .)
    LPAR            reduce using rule 25 (statement -> if_statement M_QUAD .)
    INPUT           reduce using rule 25 (statement -> if_statement M_QUAD .)
    USE             reduce using rule 25 (statement -> if_statement M_QUAD .)
    WHILE           reduce using rule 25 (statement -> if_statement M_QUAD .)
    DO              reduce using rule 25 (statement -> if_statement M_QUAD .)
    FOR             reduce using rule 25 (statement -> if_statement M_QUAD .)
    SWITCH          reduce using rule 25 (statement -> if_statement M_QUAD .)
    IF              reduce using rule 25 (statement -> if_statement M_QUAD .)
    IDENTIFIER      reduce using rule 25 (statement -> if_statement M_QUAD .)
    INTEGER         reduce using rule 25 (statement -> if_statement M_QUAD .)
    FLOAT           reduce using rule 25 (statement -> if_statement M_QUAD .)
    HEXADECIMAL     reduce using rule 25 (statement -> if_statement M_QUAD .)
    OCTAL           reduce using rule 25 (statement -> if_statement M_QUAD .)
    BINARY          reduce using rule 25 (statement -> if_statement M_QUAD .)
    EXPONANTIAL     reduce using rule 25 (statement -> if_statement M_QUAD .)
    STRING          reduce using rule 25 (statement -> if_statement M_QUAD .)
    PSEUDO_STRING   reduce using rule 25 (statement -> if_statement M_QUAD .)
    SUB             reduce using rule 25 (statement -> if_statement M_QUAD .)
    $end            reduce using rule 25 (statement -> if_statement M_QUAD .)
    BLOCK_END       reduce using rule 25 (statement -> if_statement M_QUAD .)


state 112

    (10) statement -> assignment M_QUAD .

    ELSE            reduce using rule 10 (statement -> assignment M_QUAD .)
    FOREACH         reduce using rule 10 (statement -> assignment M_QUAD .)
    MY              reduce using rule 10 (statement -> assignment M_QUAD .)
    SCALAR_VARIABLE reduce using rule 10 (statement -> assignment M_QUAD .)
    ARRAY_VARIABLE  reduce using rule 10 (statement -> assignment M_QUAD .)
    HASH_VARIABLE   reduce using rule 10 (statement -> assignment M_QUAD .)
    BREAK           reduce using rule 10 (statement -> assignment M_QUAD .)
    CONTINUE        reduce using rule 10 (statement -> assignment M_QUAD .)
    PRINT           reduce using rule 10 (statement -> assignment M_QUAD .)
    RETURN          reduce using rule 10 (statement -> assignment M_QUAD .)
    DIE             reduce using rule 10 (statement -> assignment M_QUAD .)
    CHOMP           reduce using rule 10 (statement -> assignment M_QUAD .)
    MINUS           reduce using rule 10 (statement -> assignment M_QUAD .)
    INCREAMENT      reduce using rule 10 (statement -> assignment M_QUAD .)
    DCREAMENT       reduce using rule 10 (statement -> assignment M_QUAD .)
    NOT             reduce using rule 10 (statement -> assignment M_QUAD .)
    LPAR            reduce using rule 10 (statement -> assignment M_QUAD .)
    INPUT           reduce using rule 10 (statement -> assignment M_QUAD .)
    USE             reduce using rule 10 (statement -> assignment M_QUAD .)
    WHILE           reduce using rule 10 (statement -> assignment M_QUAD .)
    DO              reduce using rule 10 (statement -> assignment M_QUAD .)
    FOR             reduce using rule 10 (statement -> assignment M_QUAD .)
    SWITCH          reduce using rule 10 (statement -> assignment M_QUAD .)
    IF              reduce using rule 10 (statement -> assignment M_QUAD .)
    IDENTIFIER      reduce using rule 10 (statement -> assignment M_QUAD .)
    INTEGER         reduce using rule 10 (statement -> assignment M_QUAD .)
    FLOAT           reduce using rule 10 (statement -> assignment M_QUAD .)
    HEXADECIMAL     reduce using rule 10 (statement -> assignment M_QUAD .)
    OCTAL           reduce using rule 10 (statement -> assignment M_QUAD .)
    BINARY          reduce using rule 10 (statement -> assignment M_QUAD .)
    EXPONANTIAL     reduce using rule 10 (statement -> assignment M_QUAD .)
    STRING          reduce using rule 10 (statement -> assignment M_QUAD .)
    PSEUDO_STRING   reduce using rule 10 (statement -> assignment M_QUAD .)
    SUB             reduce using rule 10 (statement -> assignment M_QUAD .)
    $end            reduce using rule 10 (statement -> assignment M_QUAD .)
    BLOCK_END       reduce using rule 10 (statement -> assignment M_QUAD .)


state 113

    (32) if_statement -> IF expression . RPAR M_if block_or_statement
    (34) ifelse_statement -> IF expression . RPAR M_if block_or_statement ELSE M_else block_or_statement
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    RPAR            shift and go to state 168
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 114

    (124) expression -> expression OP_GREATER_THAN_E . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 169

state 115

    (125) expression -> expression OP_LESS_THAN . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 170

state 116

    (127) expression -> expression EQUAL . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 171

state 117

    (116) expression -> expression MULTIPLY . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 172

state 118

    (120) expression -> expression Q_MARK . M_QMARK expression COLON M_COLON expression
    (121) M_QMARK -> . epsilon
    (147) epsilon -> .

    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 173
    M_QMARK                        shift and go to state 174

state 119

    (115) expression -> expression MINUS . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 175

state 120

    (123) expression -> expression OP_GREATER_THAN . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 176

state 121

    (119) expression -> expression EXPONENT . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 177

state 122

    (111) expression -> expression INCREAMENT .

    INCREAMENT      reduce using rule 111 (expression -> expression INCREAMENT .)
    DCREAMENT       reduce using rule 111 (expression -> expression INCREAMENT .)
    PLUS            reduce using rule 111 (expression -> expression INCREAMENT .)
    MINUS           reduce using rule 111 (expression -> expression INCREAMENT .)
    MULTIPLY        reduce using rule 111 (expression -> expression INCREAMENT .)
    DIVIDE          reduce using rule 111 (expression -> expression INCREAMENT .)
    MODULUS         reduce using rule 111 (expression -> expression INCREAMENT .)
    EXPONENT        reduce using rule 111 (expression -> expression INCREAMENT .)
    Q_MARK          reduce using rule 111 (expression -> expression INCREAMENT .)
    OP_GREATER_THAN reduce using rule 111 (expression -> expression INCREAMENT .)
    OP_GREATER_THAN_E reduce using rule 111 (expression -> expression INCREAMENT .)
    OP_LESS_THAN    reduce using rule 111 (expression -> expression INCREAMENT .)
    OP_LESS_THAN_E  reduce using rule 111 (expression -> expression INCREAMENT .)
    EQUAL           reduce using rule 111 (expression -> expression INCREAMENT .)
    NOT_EQUAL       reduce using rule 111 (expression -> expression INCREAMENT .)
    STRING_CMP      reduce using rule 111 (expression -> expression INCREAMENT .)
    AND             reduce using rule 111 (expression -> expression INCREAMENT .)
    OR              reduce using rule 111 (expression -> expression INCREAMENT .)
    SEMICOLON       reduce using rule 111 (expression -> expression INCREAMENT .)
    RPAR            reduce using rule 111 (expression -> expression INCREAMENT .)
    COMMA           reduce using rule 111 (expression -> expression INCREAMENT .)
    COLON           reduce using rule 111 (expression -> expression INCREAMENT .)
    BLOCK_BEGIN     reduce using rule 111 (expression -> expression INCREAMENT .)


state 123

    (113) expression -> expression DCREAMENT .

    INCREAMENT      reduce using rule 113 (expression -> expression DCREAMENT .)
    DCREAMENT       reduce using rule 113 (expression -> expression DCREAMENT .)
    PLUS            reduce using rule 113 (expression -> expression DCREAMENT .)
    MINUS           reduce using rule 113 (expression -> expression DCREAMENT .)
    MULTIPLY        reduce using rule 113 (expression -> expression DCREAMENT .)
    DIVIDE          reduce using rule 113 (expression -> expression DCREAMENT .)
    MODULUS         reduce using rule 113 (expression -> expression DCREAMENT .)
    EXPONENT        reduce using rule 113 (expression -> expression DCREAMENT .)
    Q_MARK          reduce using rule 113 (expression -> expression DCREAMENT .)
    OP_GREATER_THAN reduce using rule 113 (expression -> expression DCREAMENT .)
    OP_GREATER_THAN_E reduce using rule 113 (expression -> expression DCREAMENT .)
    OP_LESS_THAN    reduce using rule 113 (expression -> expression DCREAMENT .)
    OP_LESS_THAN_E  reduce using rule 113 (expression -> expression DCREAMENT .)
    EQUAL           reduce using rule 113 (expression -> expression DCREAMENT .)
    NOT_EQUAL       reduce using rule 113 (expression -> expression DCREAMENT .)
    STRING_CMP      reduce using rule 113 (expression -> expression DCREAMENT .)
    AND             reduce using rule 113 (expression -> expression DCREAMENT .)
    OR              reduce using rule 113 (expression -> expression DCREAMENT .)
    SEMICOLON       reduce using rule 113 (expression -> expression DCREAMENT .)
    RPAR            reduce using rule 113 (expression -> expression DCREAMENT .)
    COMMA           reduce using rule 113 (expression -> expression DCREAMENT .)
    COLON           reduce using rule 113 (expression -> expression DCREAMENT .)
    BLOCK_BEGIN     reduce using rule 113 (expression -> expression DCREAMENT .)


state 124

    (129) expression -> expression STRING_CMP . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 178

state 125

    (114) expression -> expression PLUS . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 179

state 126

    (117) expression -> expression DIVIDE . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 180

state 127

    (128) expression -> expression NOT_EQUAL . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 181

state 128

    (118) expression -> expression MODULUS . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 182

state 129

    (130) expression -> expression AND . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 183

state 130

    (126) expression -> expression OP_LESS_THAN_E . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 184

state 131

    (19) statement -> expression M_QUAD . SEMICOLON

    SEMICOLON       shift and go to state 185


state 132

    (131) expression -> expression OR . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 186

state 133

    (133) expression -> LPAR expression RPAR .

    INCREAMENT      reduce using rule 133 (expression -> LPAR expression RPAR .)
    DCREAMENT       reduce using rule 133 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 133 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 133 (expression -> LPAR expression RPAR .)
    MULTIPLY        reduce using rule 133 (expression -> LPAR expression RPAR .)
    DIVIDE          reduce using rule 133 (expression -> LPAR expression RPAR .)
    MODULUS         reduce using rule 133 (expression -> LPAR expression RPAR .)
    EXPONENT        reduce using rule 133 (expression -> LPAR expression RPAR .)
    Q_MARK          reduce using rule 133 (expression -> LPAR expression RPAR .)
    OP_GREATER_THAN reduce using rule 133 (expression -> LPAR expression RPAR .)
    OP_GREATER_THAN_E reduce using rule 133 (expression -> LPAR expression RPAR .)
    OP_LESS_THAN    reduce using rule 133 (expression -> LPAR expression RPAR .)
    OP_LESS_THAN_E  reduce using rule 133 (expression -> LPAR expression RPAR .)
    EQUAL           reduce using rule 133 (expression -> LPAR expression RPAR .)
    NOT_EQUAL       reduce using rule 133 (expression -> LPAR expression RPAR .)
    STRING_CMP      reduce using rule 133 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 133 (expression -> LPAR expression RPAR .)
    OR              reduce using rule 133 (expression -> LPAR expression RPAR .)
    SEMICOLON       reduce using rule 133 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 133 (expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 133 (expression -> LPAR expression RPAR .)
    COLON           reduce using rule 133 (expression -> LPAR expression RPAR .)
    BLOCK_BEGIN     reduce using rule 133 (expression -> LPAR expression RPAR .)


state 134

    (58) statement -> FOREACH LPAR INTEGER . DOUBLE_DOT INTEGER RPAR block_or_statement

    DOUBLE_DOT      shift and go to state 187


state 135

    (55) statement -> FOREACH SCALAR_VARIABLE LPAR . ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> FOREACH SCALAR_VARIABLE LPAR . keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> FOREACH SCALAR_VARIABLE LPAR . keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (53) keys_or_values -> . KEYS
    (54) keys_or_values -> . VALUES

    ARRAY_VARIABLE  shift and go to state 191
    KEYS            shift and go to state 189
    VALUES          shift and go to state 190

    keys_or_values                 shift and go to state 188

state 136

    (97) return -> RETURN expression SEMICOLON .

    ELSE            reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    FOREACH         reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    MY              reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    HASH_VARIABLE   reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    DIE             reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    CHOMP           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    INCREAMENT      reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    DCREAMENT       reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    LPAR            reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    INPUT           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    USE             reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    DO              reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    INTEGER         reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    OCTAL           reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    BINARY          reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    EXPONANTIAL     reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    PSEUDO_STRING   reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    SUB             reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    $end            reduce using rule 97 (return -> RETURN expression SEMICOLON .)
    BLOCK_END       reduce using rule 97 (return -> RETURN expression SEMICOLON .)


state 137

    (106) print -> PRINT printlist SEMICOLON .

    FOREACH         reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    MY              reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    HASH_VARIABLE   reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    BREAK           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    CONTINUE        reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    PRINT           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    RETURN          reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    DIE             reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    CHOMP           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    MINUS           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    INCREAMENT      reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    DCREAMENT       reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    NOT             reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    LPAR            reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    INPUT           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    USE             reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    WHILE           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    DO              reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    FOR             reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    SWITCH          reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    IF              reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    IDENTIFIER      reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    INTEGER         reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    FLOAT           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    HEXADECIMAL     reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    OCTAL           reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    BINARY          reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    EXPONANTIAL     reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    STRING          reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    PSEUDO_STRING   reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    SUB             reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    $end            reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    BLOCK_END       reduce using rule 106 (print -> PRINT printlist SEMICOLON .)
    ELSE            reduce using rule 106 (print -> PRINT printlist SEMICOLON .)


state 138

    (44) for_statement -> FOR LPAR assignment . M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment . M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    M_QUAD                         shift and go to state 192
    epsilon                        shift and go to state 63

state 139

    (73) assignment -> SCALAR_VARIABLE . ASSIGNMENT expression SEMICOLON
    (74) assignment -> SCALAR_VARIABLE . ASSIGNMENT function_call SEMICOLON
    (75) assignment -> SCALAR_VARIABLE . SIMULT_ASSIGNMENT function_call SEMICOLON

    ASSIGNMENT      shift and go to state 82
    SIMULT_ASSIGNMENT shift and go to state 83


state 140

    (66) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> MY . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> MY . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> MY . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> MY . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON

    ARRAY_VARIABLE  shift and go to state 194
    SCALAR_VARIABLE shift and go to state 193
    HASH_VARIABLE   shift and go to state 86


state 141

    (77) assignment -> HASH_VARIABLE ASSIGNMENT LPAR . hashList RPAR SEMICOLON
    (87) hashList -> . expression COMMA expression COMMA hashList
    (88) hashList -> . expression COMMA expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    hashList                       shift and go to state 195
    constant                       shift and go to state 51
    expression                     shift and go to state 196

state 142

    (74) assignment -> SCALAR_VARIABLE ASSIGNMENT function_call . SEMICOLON

    SEMICOLON       shift and go to state 197


state 143

    (73) assignment -> SCALAR_VARIABLE ASSIGNMENT expression . SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       shift and go to state 198
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 144

    (75) assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call . SEMICOLON

    SEMICOLON       shift and go to state 199


state 145

    (71) assignment -> MY HASH_VARIABLE ASSIGNMENT . LPAR hashList RPAR SEMICOLON

    LPAR            shift and go to state 200


state 146

    (89) declaration -> MY SCALAR_VARIABLE SEMICOLON .

    ELSE            reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    MY              reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    DIE             reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    NOT             reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    USE             reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    DO              reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    FOR             reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    IF              reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    STRING          reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    SUB             reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    $end            reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 89 (declaration -> MY SCALAR_VARIABLE SEMICOLON .)


state 147

    (70) assignment -> MY SCALAR_VARIABLE ASSIGNMENT . expression SEMICOLON
    (72) assignment -> MY SCALAR_VARIABLE ASSIGNMENT . function_call SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING
    (92) function_name -> . IDENTIFIER

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28
    IDENTIFIER      shift and go to state 43

    constant                       shift and go to state 51
    function_call                  shift and go to state 201
    expression                     shift and go to state 202
    function_name                  shift and go to state 44

state 148

    (90) declaration -> MY ARRAY_VARIABLE SEMICOLON .

    ELSE            reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    MY              reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    DIE             reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    NOT             reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    USE             reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    DO              reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    FOR             reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    IF              reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    STRING          reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    SUB             reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    $end            reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 90 (declaration -> MY ARRAY_VARIABLE SEMICOLON .)


state 149

    (66) assignment -> MY ARRAY_VARIABLE ASSIGNMENT . array SEMICOLON
    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT . LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> MY ARRAY_VARIABLE ASSIGNMENT . KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> MY ARRAY_VARIABLE ASSIGNMENT . VALUES HASH_VARIABLE SEMICOLON
    (81) array -> . ARRAY_VARIABLE
    (82) array -> . LPAR arrayList RPAR

    LPAR            shift and go to state 203
    KEYS            shift and go to state 204
    VALUES          shift and go to state 205
    ARRAY_VARIABLE  shift and go to state 158

    array                          shift and go to state 206

state 150

    (103) identifier -> IDENTIFIER .

    BLOCK_BEGIN     reduce using rule 103 (identifier -> IDENTIFIER .)


state 151

    (101) subroutine -> SUB marker identifier . M_sub block marker1
    (102) M_sub -> . epsilon
    (147) epsilon -> .

    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 207
    M_sub                          shift and go to state 208

state 152

    (7) block -> BLOCK_BEGIN . statements BLOCK_END
    (8) statements -> . statement statements
    (9) statements -> . statement M_STATEMENTS
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    statements                     shift and go to state 209
    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 42
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57

state 153

    (43) do_while_statement -> DO M_QUAD block . WHILE LPAR expression RPAR M_whileBranch SEMICOLON

    WHILE           shift and go to state 210


state 154

    (40) while_statement -> WHILE M_QUAD LPAR . expression RPAR M_whileBranch block_or_statement
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 211

state 155

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR . INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (82) array -> LPAR . arrayList RPAR
    (83) arrayList -> . array_expression COMMA arrayList
    (84) arrayList -> . array_expression
    (86) arrayList -> . epsilon
    (85) array_expression -> . expression
    (147) epsilon -> .
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    INTEGER         shift and go to state 215
    RPAR            reduce using rule 147 (epsilon -> .)
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    epsilon                        shift and go to state 213
    arrayList                      shift and go to state 214
    expression                     shift and go to state 216
    array_expression               shift and go to state 212

state 156

    (78) assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS . HASH_VARIABLE SEMICOLON

    HASH_VARIABLE   shift and go to state 217


state 157

    (79) assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES . HASH_VARIABLE SEMICOLON

    HASH_VARIABLE   shift and go to state 218


state 158

    (81) array -> ARRAY_VARIABLE .

    SEMICOLON       reduce using rule 81 (array -> ARRAY_VARIABLE .)


state 159

    (76) assignment -> ARRAY_VARIABLE ASSIGNMENT array . SEMICOLON

    SEMICOLON       shift and go to state 219


state 160

    (59) switch_statement -> SWITCH LPAR SCALAR_VARIABLE . RPAR BLOCK_BEGIN cases BLOCK_END

    RPAR            shift and go to state 220


state 161

    (91) function_call -> function_name LPAR argumentList . RPAR SEMICOLON

    RPAR            shift and go to state 221


state 162

    (93) argumentList -> epsilon .

    RPAR            reduce using rule 93 (argumentList -> epsilon .)


state 163

    (94) argumentList -> expression . arguments
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression
    (95) arguments -> . COMMA expression arguments
    (96) arguments -> . epsilon
    (147) epsilon -> .

    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132
    COMMA           shift and go to state 224
    RPAR            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 223
    arguments                      shift and go to state 222

state 164

    (100) chomp -> CHOMP expression SEMICOLON .

    FOREACH         reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    MY              reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    HASH_VARIABLE   reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    BREAK           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    CONTINUE        reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    PRINT           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    RETURN          reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    DIE             reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    CHOMP           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    MINUS           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    INCREAMENT      reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    DCREAMENT       reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    NOT             reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    LPAR            reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    INPUT           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    USE             reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    WHILE           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    DO              reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    FOR             reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    SWITCH          reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    IF              reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    IDENTIFIER      reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    INTEGER         reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    FLOAT           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    OCTAL           reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    BINARY          reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    EXPONANTIAL     reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    STRING          reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    PSEUDO_STRING   reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    SUB             reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    $end            reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    ELSE            reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)
    BLOCK_END       reduce using rule 100 (chomp -> CHOMP expression SEMICOLON .)


state 165

    (27) use -> USE STRICT SEMICOLON .

    FOREACH         reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    MY              reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    HASH_VARIABLE   reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    BREAK           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    CONTINUE        reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    PRINT           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    RETURN          reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    DIE             reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    CHOMP           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    MINUS           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    INCREAMENT      reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    DCREAMENT       reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    NOT             reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    LPAR            reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    INPUT           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    USE             reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    WHILE           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    DO              reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    FOR             reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    SWITCH          reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    IF              reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    INTEGER         reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    FLOAT           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    HEXADECIMAL     reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    OCTAL           reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    BINARY          reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    EXPONANTIAL     reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    STRING          reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    PSEUDO_STRING   reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    SUB             reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    $end            reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    BLOCK_END       reduce using rule 27 (use -> USE STRICT SEMICOLON .)
    ELSE            reduce using rule 27 (use -> USE STRICT SEMICOLON .)


state 166

    (28) use -> USE WARNINGS SEMICOLON .

    FOREACH         reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    MY              reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    HASH_VARIABLE   reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    BREAK           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    CONTINUE        reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    PRINT           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    RETURN          reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    DIE             reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    CHOMP           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    MINUS           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    INCREAMENT      reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    DCREAMENT       reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    NOT             reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    LPAR            reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    INPUT           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    USE             reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    WHILE           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    DO              reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    FOR             reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    SWITCH          reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    IF              reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    INTEGER         reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    FLOAT           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    HEXADECIMAL     reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    OCTAL           reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    BINARY          reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    EXPONANTIAL     reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    STRING          reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    PSEUDO_STRING   reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    SUB             reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    $end            reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    BLOCK_END       reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)
    ELSE            reduce using rule 28 (use -> USE WARNINGS SEMICOLON .)


state 167

    (107) die -> DIE printlist SEMICOLON .

    FOREACH         reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    MY              reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    HASH_VARIABLE   reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    BREAK           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    CONTINUE        reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    PRINT           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    RETURN          reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    DIE             reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    CHOMP           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    MINUS           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    INCREAMENT      reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    DCREAMENT       reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    NOT             reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    LPAR            reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    INPUT           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    USE             reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    WHILE           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    DO              reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    FOR             reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    SWITCH          reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    IF              reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    IDENTIFIER      reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    INTEGER         reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    FLOAT           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    HEXADECIMAL     reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    OCTAL           reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    BINARY          reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    EXPONANTIAL     reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    STRING          reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    PSEUDO_STRING   reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    BLOCK_END       reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    ELSE            reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    SUB             reduce using rule 107 (die -> DIE printlist SEMICOLON .)
    $end            reduce using rule 107 (die -> DIE printlist SEMICOLON .)


state 168

    (32) if_statement -> IF expression RPAR . M_if block_or_statement
    (34) ifelse_statement -> IF expression RPAR . M_if block_or_statement ELSE M_else block_or_statement
    (33) M_if -> . epsilon
    (147) epsilon -> .

    SEMICOLON       reduce using rule 147 (epsilon -> .)
    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)
    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    M_if                           shift and go to state 225
    epsilon                        shift and go to state 226

state 169

    (124) expression -> expression OP_GREATER_THAN_E expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    DCREAMENT       reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    Q_MARK          reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    OP_GREATER_THAN reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    OP_GREATER_THAN_E reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    OP_LESS_THAN    reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    OP_LESS_THAN_E  reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    EQUAL           reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    NOT_EQUAL       reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    STRING_CMP      reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    AND             reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    OR              reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    SEMICOLON       reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    RPAR            reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    COMMA           reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    COLON           reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    BLOCK_BEGIN     reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121

  ! PLUS            [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! MINUS           [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! MULTIPLY        [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! DIVIDE          [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! MODULUS         [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! EXPONENT        [ reduce using rule 124 (expression -> expression OP_GREATER_THAN_E expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 170

    (125) expression -> expression OP_LESS_THAN expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    DCREAMENT       reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    Q_MARK          reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    OP_GREATER_THAN reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    OP_GREATER_THAN_E reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    OP_LESS_THAN    reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    OP_LESS_THAN_E  reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    EQUAL           reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    NOT_EQUAL       reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    STRING_CMP      reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    AND             reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    OR              reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    SEMICOLON       reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    RPAR            reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    COMMA           reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    COLON           reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    BLOCK_BEGIN     reduce using rule 125 (expression -> expression OP_LESS_THAN expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121

  ! PLUS            [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! MINUS           [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! MODULUS         [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! EXPONENT        [ reduce using rule 125 (expression -> expression OP_LESS_THAN expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 171

    (127) expression -> expression EQUAL expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 127 (expression -> expression EQUAL expression .)
    DCREAMENT       reduce using rule 127 (expression -> expression EQUAL expression .)
    Q_MARK          reduce using rule 127 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 127 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 127 (expression -> expression EQUAL expression .)
    STRING_CMP      reduce using rule 127 (expression -> expression EQUAL expression .)
    AND             reduce using rule 127 (expression -> expression EQUAL expression .)
    OR              reduce using rule 127 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 127 (expression -> expression EQUAL expression .)
    RPAR            reduce using rule 127 (expression -> expression EQUAL expression .)
    COMMA           reduce using rule 127 (expression -> expression EQUAL expression .)
    COLON           reduce using rule 127 (expression -> expression EQUAL expression .)
    BLOCK_BEGIN     reduce using rule 127 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130

  ! PLUS            [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 127 (expression -> expression EQUAL expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 172

    (116) expression -> expression MULTIPLY expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 116 (expression -> expression MULTIPLY expression .)
    DCREAMENT       reduce using rule 116 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 116 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 116 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 116 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 116 (expression -> expression MULTIPLY expression .)
    MODULUS         reduce using rule 116 (expression -> expression MULTIPLY expression .)
    EXPONENT        reduce using rule 116 (expression -> expression MULTIPLY expression .)
    Q_MARK          reduce using rule 116 (expression -> expression MULTIPLY expression .)
    OP_GREATER_THAN reduce using rule 116 (expression -> expression MULTIPLY expression .)
    OP_GREATER_THAN_E reduce using rule 116 (expression -> expression MULTIPLY expression .)
    OP_LESS_THAN    reduce using rule 116 (expression -> expression MULTIPLY expression .)
    OP_LESS_THAN_E  reduce using rule 116 (expression -> expression MULTIPLY expression .)
    EQUAL           reduce using rule 116 (expression -> expression MULTIPLY expression .)
    NOT_EQUAL       reduce using rule 116 (expression -> expression MULTIPLY expression .)
    STRING_CMP      reduce using rule 116 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 116 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 116 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 116 (expression -> expression MULTIPLY expression .)
    RPAR            reduce using rule 116 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 116 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 116 (expression -> expression MULTIPLY expression .)
    BLOCK_BEGIN     reduce using rule 116 (expression -> expression MULTIPLY expression .)

  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MODULUS         [ shift and go to state 128 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 173

    (121) M_QMARK -> epsilon .

    MINUS           reduce using rule 121 (M_QMARK -> epsilon .)
    INCREAMENT      reduce using rule 121 (M_QMARK -> epsilon .)
    DCREAMENT       reduce using rule 121 (M_QMARK -> epsilon .)
    NOT             reduce using rule 121 (M_QMARK -> epsilon .)
    LPAR            reduce using rule 121 (M_QMARK -> epsilon .)
    SCALAR_VARIABLE reduce using rule 121 (M_QMARK -> epsilon .)
    INPUT           reduce using rule 121 (M_QMARK -> epsilon .)
    INTEGER         reduce using rule 121 (M_QMARK -> epsilon .)
    FLOAT           reduce using rule 121 (M_QMARK -> epsilon .)
    HEXADECIMAL     reduce using rule 121 (M_QMARK -> epsilon .)
    OCTAL           reduce using rule 121 (M_QMARK -> epsilon .)
    BINARY          reduce using rule 121 (M_QMARK -> epsilon .)
    EXPONANTIAL     reduce using rule 121 (M_QMARK -> epsilon .)
    STRING          reduce using rule 121 (M_QMARK -> epsilon .)
    PSEUDO_STRING   reduce using rule 121 (M_QMARK -> epsilon .)


state 174

    (120) expression -> expression Q_MARK M_QMARK . expression COLON M_COLON expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 227

state 175

    (115) expression -> expression MINUS expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 115 (expression -> expression MINUS expression .)
    DCREAMENT       reduce using rule 115 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 115 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 115 (expression -> expression MINUS expression .)
    EXPONENT        reduce using rule 115 (expression -> expression MINUS expression .)
    Q_MARK          reduce using rule 115 (expression -> expression MINUS expression .)
    OP_GREATER_THAN reduce using rule 115 (expression -> expression MINUS expression .)
    OP_GREATER_THAN_E reduce using rule 115 (expression -> expression MINUS expression .)
    OP_LESS_THAN    reduce using rule 115 (expression -> expression MINUS expression .)
    OP_LESS_THAN_E  reduce using rule 115 (expression -> expression MINUS expression .)
    EQUAL           reduce using rule 115 (expression -> expression MINUS expression .)
    NOT_EQUAL       reduce using rule 115 (expression -> expression MINUS expression .)
    STRING_CMP      reduce using rule 115 (expression -> expression MINUS expression .)
    AND             reduce using rule 115 (expression -> expression MINUS expression .)
    OR              reduce using rule 115 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 115 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 115 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 115 (expression -> expression MINUS expression .)
    COLON           reduce using rule 115 (expression -> expression MINUS expression .)
    BLOCK_BEGIN     reduce using rule 115 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128

  ! MULTIPLY        [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 115 (expression -> expression MINUS expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 176

    (123) expression -> expression OP_GREATER_THAN expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    DCREAMENT       reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    Q_MARK          reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    OP_GREATER_THAN reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    OP_GREATER_THAN_E reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    OP_LESS_THAN    reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    OP_LESS_THAN_E  reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    EQUAL           reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    STRING_CMP      reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    AND             reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    OR              reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    SEMICOLON       reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    RPAR            reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    COMMA           reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    COLON           reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    BLOCK_BEGIN     reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121

  ! PLUS            [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! MINUS           [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! MULTIPLY        [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! DIVIDE          [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! MODULUS         [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! EXPONENT        [ reduce using rule 123 (expression -> expression OP_GREATER_THAN expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 177

    (119) expression -> expression EXPONENT expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 119 (expression -> expression EXPONENT expression .)
    DCREAMENT       reduce using rule 119 (expression -> expression EXPONENT expression .)
    Q_MARK          reduce using rule 119 (expression -> expression EXPONENT expression .)
    OP_GREATER_THAN reduce using rule 119 (expression -> expression EXPONENT expression .)
    OP_GREATER_THAN_E reduce using rule 119 (expression -> expression EXPONENT expression .)
    OP_LESS_THAN    reduce using rule 119 (expression -> expression EXPONENT expression .)
    OP_LESS_THAN_E  reduce using rule 119 (expression -> expression EXPONENT expression .)
    EQUAL           reduce using rule 119 (expression -> expression EXPONENT expression .)
    NOT_EQUAL       reduce using rule 119 (expression -> expression EXPONENT expression .)
    STRING_CMP      reduce using rule 119 (expression -> expression EXPONENT expression .)
    AND             reduce using rule 119 (expression -> expression EXPONENT expression .)
    OR              reduce using rule 119 (expression -> expression EXPONENT expression .)
    SEMICOLON       reduce using rule 119 (expression -> expression EXPONENT expression .)
    RPAR            reduce using rule 119 (expression -> expression EXPONENT expression .)
    COMMA           reduce using rule 119 (expression -> expression EXPONENT expression .)
    COLON           reduce using rule 119 (expression -> expression EXPONENT expression .)
    BLOCK_BEGIN     reduce using rule 119 (expression -> expression EXPONENT expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121

  ! PLUS            [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! MINUS           [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! MULTIPLY        [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! DIVIDE          [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! MODULUS         [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! EXPONENT        [ reduce using rule 119 (expression -> expression EXPONENT expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 178

    (129) expression -> expression STRING_CMP expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

  ! shift/reduce conflict for INCREAMENT resolved as shift
  ! shift/reduce conflict for DCREAMENT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for Q_MARK resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN_E resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN_E resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for STRING_CMP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 129 (expression -> expression STRING_CMP expression .)
    RPAR            reduce using rule 129 (expression -> expression STRING_CMP expression .)
    COMMA           reduce using rule 129 (expression -> expression STRING_CMP expression .)
    COLON           reduce using rule 129 (expression -> expression STRING_CMP expression .)
    BLOCK_BEGIN     reduce using rule 129 (expression -> expression STRING_CMP expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132

  ! INCREAMENT      [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! DCREAMENT       [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! PLUS            [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! MINUS           [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! MULTIPLY        [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! DIVIDE          [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! MODULUS         [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! EXPONENT        [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! Q_MARK          [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! EQUAL           [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! NOT_EQUAL       [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! STRING_CMP      [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! AND             [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]
  ! OR              [ reduce using rule 129 (expression -> expression STRING_CMP expression .) ]


state 179

    (114) expression -> expression PLUS expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 114 (expression -> expression PLUS expression .)
    DCREAMENT       reduce using rule 114 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 114 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 114 (expression -> expression PLUS expression .)
    EXPONENT        reduce using rule 114 (expression -> expression PLUS expression .)
    Q_MARK          reduce using rule 114 (expression -> expression PLUS expression .)
    OP_GREATER_THAN reduce using rule 114 (expression -> expression PLUS expression .)
    OP_GREATER_THAN_E reduce using rule 114 (expression -> expression PLUS expression .)
    OP_LESS_THAN    reduce using rule 114 (expression -> expression PLUS expression .)
    OP_LESS_THAN_E  reduce using rule 114 (expression -> expression PLUS expression .)
    EQUAL           reduce using rule 114 (expression -> expression PLUS expression .)
    NOT_EQUAL       reduce using rule 114 (expression -> expression PLUS expression .)
    STRING_CMP      reduce using rule 114 (expression -> expression PLUS expression .)
    AND             reduce using rule 114 (expression -> expression PLUS expression .)
    OR              reduce using rule 114 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 114 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 114 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 114 (expression -> expression PLUS expression .)
    COLON           reduce using rule 114 (expression -> expression PLUS expression .)
    BLOCK_BEGIN     reduce using rule 114 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128

  ! MULTIPLY        [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 114 (expression -> expression PLUS expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 180

    (117) expression -> expression DIVIDE expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 117 (expression -> expression DIVIDE expression .)
    DCREAMENT       reduce using rule 117 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 117 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 117 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 117 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 117 (expression -> expression DIVIDE expression .)
    MODULUS         reduce using rule 117 (expression -> expression DIVIDE expression .)
    EXPONENT        reduce using rule 117 (expression -> expression DIVIDE expression .)
    Q_MARK          reduce using rule 117 (expression -> expression DIVIDE expression .)
    OP_GREATER_THAN reduce using rule 117 (expression -> expression DIVIDE expression .)
    OP_GREATER_THAN_E reduce using rule 117 (expression -> expression DIVIDE expression .)
    OP_LESS_THAN    reduce using rule 117 (expression -> expression DIVIDE expression .)
    OP_LESS_THAN_E  reduce using rule 117 (expression -> expression DIVIDE expression .)
    EQUAL           reduce using rule 117 (expression -> expression DIVIDE expression .)
    NOT_EQUAL       reduce using rule 117 (expression -> expression DIVIDE expression .)
    STRING_CMP      reduce using rule 117 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 117 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 117 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 117 (expression -> expression DIVIDE expression .)
    RPAR            reduce using rule 117 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 117 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 117 (expression -> expression DIVIDE expression .)
    BLOCK_BEGIN     reduce using rule 117 (expression -> expression DIVIDE expression .)

  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MODULUS         [ shift and go to state 128 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 181

    (128) expression -> expression NOT_EQUAL expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    DCREAMENT       reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    Q_MARK          reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    STRING_CMP      reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    SEMICOLON       reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    RPAR            reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    COLON           reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    BLOCK_BEGIN     reduce using rule 128 (expression -> expression NOT_EQUAL expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130

  ! PLUS            [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! MINUS           [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! EXPONENT        [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 128 (expression -> expression NOT_EQUAL expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 182

    (118) expression -> expression MODULUS expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 118 (expression -> expression MODULUS expression .)
    DCREAMENT       reduce using rule 118 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 118 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 118 (expression -> expression MODULUS expression .)
    MULTIPLY        reduce using rule 118 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 118 (expression -> expression MODULUS expression .)
    MODULUS         reduce using rule 118 (expression -> expression MODULUS expression .)
    EXPONENT        reduce using rule 118 (expression -> expression MODULUS expression .)
    Q_MARK          reduce using rule 118 (expression -> expression MODULUS expression .)
    OP_GREATER_THAN reduce using rule 118 (expression -> expression MODULUS expression .)
    OP_GREATER_THAN_E reduce using rule 118 (expression -> expression MODULUS expression .)
    OP_LESS_THAN    reduce using rule 118 (expression -> expression MODULUS expression .)
    OP_LESS_THAN_E  reduce using rule 118 (expression -> expression MODULUS expression .)
    EQUAL           reduce using rule 118 (expression -> expression MODULUS expression .)
    NOT_EQUAL       reduce using rule 118 (expression -> expression MODULUS expression .)
    STRING_CMP      reduce using rule 118 (expression -> expression MODULUS expression .)
    AND             reduce using rule 118 (expression -> expression MODULUS expression .)
    OR              reduce using rule 118 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression MODULUS expression .)
    RPAR            reduce using rule 118 (expression -> expression MODULUS expression .)
    COMMA           reduce using rule 118 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 118 (expression -> expression MODULUS expression .)
    BLOCK_BEGIN     reduce using rule 118 (expression -> expression MODULUS expression .)

  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! PLUS            [ shift and go to state 125 ]
  ! MINUS           [ shift and go to state 119 ]
  ! MULTIPLY        [ shift and go to state 117 ]
  ! DIVIDE          [ shift and go to state 126 ]
  ! MODULUS         [ shift and go to state 128 ]
  ! EXPONENT        [ shift and go to state 121 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 183

    (130) expression -> expression AND expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 130 (expression -> expression AND expression .)
    DCREAMENT       reduce using rule 130 (expression -> expression AND expression .)
    Q_MARK          reduce using rule 130 (expression -> expression AND expression .)
    STRING_CMP      reduce using rule 130 (expression -> expression AND expression .)
    AND             reduce using rule 130 (expression -> expression AND expression .)
    OR              reduce using rule 130 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 130 (expression -> expression AND expression .)
    RPAR            reduce using rule 130 (expression -> expression AND expression .)
    COMMA           reduce using rule 130 (expression -> expression AND expression .)
    COLON           reduce using rule 130 (expression -> expression AND expression .)
    BLOCK_BEGIN     reduce using rule 130 (expression -> expression AND expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127

  ! PLUS            [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! EXPONENT        [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 130 (expression -> expression AND expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 184

    (126) expression -> expression OP_LESS_THAN_E expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    DCREAMENT       reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    Q_MARK          reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    OP_GREATER_THAN reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    OP_GREATER_THAN_E reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    OP_LESS_THAN    reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    OP_LESS_THAN_E  reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    EQUAL           reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    NOT_EQUAL       reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    STRING_CMP      reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    AND             reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    OR              reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    SEMICOLON       reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    RPAR            reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    COMMA           reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    COLON           reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    BLOCK_BEGIN     reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121

  ! PLUS            [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! MINUS           [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! MULTIPLY        [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! DIVIDE          [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! MODULUS         [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! EXPONENT        [ reduce using rule 126 (expression -> expression OP_LESS_THAN_E expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! OP_GREATER_THAN [ shift and go to state 120 ]
  ! OP_GREATER_THAN_E [ shift and go to state 114 ]
  ! OP_LESS_THAN    [ shift and go to state 115 ]
  ! OP_LESS_THAN_E  [ shift and go to state 130 ]
  ! EQUAL           [ shift and go to state 116 ]
  ! NOT_EQUAL       [ shift and go to state 127 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! AND             [ shift and go to state 129 ]
  ! OR              [ shift and go to state 132 ]


state 185

    (19) statement -> expression M_QUAD SEMICOLON .

    ELSE            reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    FOREACH         reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    MY              reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    HASH_VARIABLE   reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    BREAK           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    CONTINUE        reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    PRINT           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    DIE             reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    CHOMP           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    MINUS           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    INCREAMENT      reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    DCREAMENT       reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    NOT             reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    LPAR            reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    INPUT           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    USE             reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    DO              reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    FOR             reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    SWITCH          reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    IF              reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    INTEGER         reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    FLOAT           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    HEXADECIMAL     reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    OCTAL           reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    BINARY          reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    EXPONANTIAL     reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    STRING          reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    PSEUDO_STRING   reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    SUB             reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    $end            reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)
    BLOCK_END       reduce using rule 19 (statement -> expression M_QUAD SEMICOLON .)


state 186

    (131) expression -> expression OR expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    INCREAMENT      reduce using rule 131 (expression -> expression OR expression .)
    DCREAMENT       reduce using rule 131 (expression -> expression OR expression .)
    Q_MARK          reduce using rule 131 (expression -> expression OR expression .)
    STRING_CMP      reduce using rule 131 (expression -> expression OR expression .)
    OR              reduce using rule 131 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 131 (expression -> expression OR expression .)
    RPAR            reduce using rule 131 (expression -> expression OR expression .)
    COMMA           reduce using rule 131 (expression -> expression OR expression .)
    COLON           reduce using rule 131 (expression -> expression OR expression .)
    BLOCK_BEGIN     reduce using rule 131 (expression -> expression OR expression .)
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    AND             shift and go to state 129

  ! PLUS            [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! EXPONENT        [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 131 (expression -> expression OR expression .) ]
  ! INCREAMENT      [ shift and go to state 122 ]
  ! DCREAMENT       [ shift and go to state 123 ]
  ! Q_MARK          [ shift and go to state 118 ]
  ! STRING_CMP      [ shift and go to state 124 ]
  ! OR              [ shift and go to state 132 ]


state 187

    (58) statement -> FOREACH LPAR INTEGER DOUBLE_DOT . INTEGER RPAR block_or_statement

    INTEGER         shift and go to state 228


state 188

    (56) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values . HASH_VARIABLE RPAR block_or_statement
    (57) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values . HASH_VARIABLE RPAR SEMICOLON

    HASH_VARIABLE   shift and go to state 229


state 189

    (53) keys_or_values -> KEYS .

    HASH_VARIABLE   reduce using rule 53 (keys_or_values -> KEYS .)


state 190

    (54) keys_or_values -> VALUES .

    HASH_VARIABLE   reduce using rule 54 (keys_or_values -> VALUES .)


state 191

    (55) statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE . RPAR block_or_statement

    RPAR            shift and go to state 230


state 192

    (44) for_statement -> FOR LPAR assignment M_QUAD . expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD . expression SEMICOLON M_for expression RPAR SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 231

state 193

    (70) assignment -> MY SCALAR_VARIABLE . ASSIGNMENT expression SEMICOLON
    (72) assignment -> MY SCALAR_VARIABLE . ASSIGNMENT function_call SEMICOLON

    ASSIGNMENT      shift and go to state 147


state 194

    (66) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT array SEMICOLON
    (67) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> MY ARRAY_VARIABLE . ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON

    ASSIGNMENT      shift and go to state 149


state 195

    (77) assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList . RPAR SEMICOLON

    RPAR            shift and go to state 232


state 196

    (87) hashList -> expression . COMMA expression COMMA hashList
    (88) hashList -> expression . COMMA expression
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    COMMA           shift and go to state 233
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 197

    (74) assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .

    ELSE            reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FOREACH         reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    MY              reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    HASH_VARIABLE   reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BREAK           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    CONTINUE        reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    PRINT           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    RETURN          reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DIE             reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    CHOMP           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    MINUS           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INCREAMENT      reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DCREAMENT       reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    NOT             reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    LPAR            reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INPUT           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    USE             reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    WHILE           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DO              reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FOR             reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SWITCH          reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    IF              reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    IDENTIFIER      reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INTEGER         reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FLOAT           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    HEXADECIMAL     reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    OCTAL           reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BINARY          reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    EXPONANTIAL     reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    STRING          reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    PSEUDO_STRING   reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SUB             reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    $end            reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BLOCK_END       reduce using rule 74 (assignment -> SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)


state 198

    (73) assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .

    ELSE            reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FOREACH         reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    MY              reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    HASH_VARIABLE   reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BREAK           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    CONTINUE        reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    PRINT           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DIE             reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    CHOMP           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INCREAMENT      reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DCREAMENT       reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    LPAR            reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INPUT           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    USE             reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DO              reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FOR             reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SWITCH          reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INTEGER         reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FLOAT           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    OCTAL           reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BINARY          reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    EXPONANTIAL     reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    STRING          reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    PSEUDO_STRING   reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SUB             reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    $end            reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BLOCK_END       reduce using rule 73 (assignment -> SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)


state 199

    (75) assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .

    ELSE            reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    FOREACH         reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    MY              reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    HASH_VARIABLE   reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    BREAK           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    CONTINUE        reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    PRINT           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    RETURN          reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    DIE             reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    CHOMP           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    MINUS           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    INCREAMENT      reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    DCREAMENT       reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    NOT             reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    LPAR            reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    INPUT           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    USE             reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    WHILE           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    DO              reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    FOR             reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    SWITCH          reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    IF              reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    IDENTIFIER      reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    INTEGER         reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    FLOAT           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    HEXADECIMAL     reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    OCTAL           reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    BINARY          reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    EXPONANTIAL     reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    STRING          reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    PSEUDO_STRING   reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    SUB             reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    $end            reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)
    BLOCK_END       reduce using rule 75 (assignment -> SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON .)


state 200

    (71) assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR . hashList RPAR SEMICOLON
    (87) hashList -> . expression COMMA expression COMMA hashList
    (88) hashList -> . expression COMMA expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    hashList                       shift and go to state 234
    constant                       shift and go to state 51
    expression                     shift and go to state 196

state 201

    (72) assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call . SEMICOLON

    SEMICOLON       shift and go to state 235


state 202

    (70) assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression . SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       shift and go to state 236
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 203

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR . INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (82) array -> LPAR . arrayList RPAR
    (83) arrayList -> . array_expression COMMA arrayList
    (84) arrayList -> . array_expression
    (86) arrayList -> . epsilon
    (85) array_expression -> . expression
    (147) epsilon -> .
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    INTEGER         shift and go to state 237
    RPAR            reduce using rule 147 (epsilon -> .)
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    epsilon                        shift and go to state 213
    arrayList                      shift and go to state 214
    expression                     shift and go to state 216
    array_expression               shift and go to state 212

state 204

    (68) assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS . HASH_VARIABLE SEMICOLON

    HASH_VARIABLE   shift and go to state 238


state 205

    (69) assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES . HASH_VARIABLE SEMICOLON

    HASH_VARIABLE   shift and go to state 239


state 206

    (66) assignment -> MY ARRAY_VARIABLE ASSIGNMENT array . SEMICOLON

    SEMICOLON       shift and go to state 240


state 207

    (102) M_sub -> epsilon .

    BLOCK_BEGIN     reduce using rule 102 (M_sub -> epsilon .)


state 208

    (101) subroutine -> SUB marker identifier M_sub . block marker1
    (7) block -> . BLOCK_BEGIN statements BLOCK_END

    BLOCK_BEGIN     shift and go to state 152

    block                          shift and go to state 241

state 209

    (7) block -> BLOCK_BEGIN statements . BLOCK_END

    BLOCK_END       shift and go to state 242


state 210

    (43) do_while_statement -> DO M_QUAD block WHILE . LPAR expression RPAR M_whileBranch SEMICOLON

    LPAR            shift and go to state 243


state 211

    (40) while_statement -> WHILE M_QUAD LPAR expression . RPAR M_whileBranch block_or_statement
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    RPAR            shift and go to state 244
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 212

    (83) arrayList -> array_expression . COMMA arrayList
    (84) arrayList -> array_expression .

    COMMA           shift and go to state 245
    RPAR            reduce using rule 84 (arrayList -> array_expression .)


state 213

    (86) arrayList -> epsilon .

    RPAR            reduce using rule 86 (arrayList -> epsilon .)


state 214

    (82) array -> LPAR arrayList . RPAR

    RPAR            shift and go to state 246


state 215

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER . DOUBLE_DOT INTEGER RPAR SEMICOLON
    (136) constant -> INTEGER .

    DOUBLE_DOT      shift and go to state 247
    INCREAMENT      reduce using rule 136 (constant -> INTEGER .)
    DCREAMENT       reduce using rule 136 (constant -> INTEGER .)
    PLUS            reduce using rule 136 (constant -> INTEGER .)
    MINUS           reduce using rule 136 (constant -> INTEGER .)
    MULTIPLY        reduce using rule 136 (constant -> INTEGER .)
    DIVIDE          reduce using rule 136 (constant -> INTEGER .)
    MODULUS         reduce using rule 136 (constant -> INTEGER .)
    EXPONENT        reduce using rule 136 (constant -> INTEGER .)
    Q_MARK          reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN_E reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN    reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN_E  reduce using rule 136 (constant -> INTEGER .)
    EQUAL           reduce using rule 136 (constant -> INTEGER .)
    NOT_EQUAL       reduce using rule 136 (constant -> INTEGER .)
    STRING_CMP      reduce using rule 136 (constant -> INTEGER .)
    AND             reduce using rule 136 (constant -> INTEGER .)
    OR              reduce using rule 136 (constant -> INTEGER .)
    COMMA           reduce using rule 136 (constant -> INTEGER .)
    RPAR            reduce using rule 136 (constant -> INTEGER .)


state 216

    (85) array_expression -> expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    COMMA           reduce using rule 85 (array_expression -> expression .)
    RPAR            reduce using rule 85 (array_expression -> expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 217

    (78) assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 248


state 218

    (79) assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 249


state 219

    (76) assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .

    ELSE            reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FOREACH         reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    MY              reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    HASH_VARIABLE   reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BREAK           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    CONTINUE        reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    PRINT           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    RETURN          reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DIE             reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    CHOMP           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    MINUS           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INCREAMENT      reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DCREAMENT       reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    NOT             reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    LPAR            reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INPUT           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    USE             reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    WHILE           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DO              reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FOR             reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SWITCH          reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    IF              reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    IDENTIFIER      reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INTEGER         reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FLOAT           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    HEXADECIMAL     reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    OCTAL           reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BINARY          reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    EXPONANTIAL     reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    STRING          reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    PSEUDO_STRING   reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SUB             reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    $end            reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BLOCK_END       reduce using rule 76 (assignment -> ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)


state 220

    (59) switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR . BLOCK_BEGIN cases BLOCK_END

    BLOCK_BEGIN     shift and go to state 250


state 221

    (91) function_call -> function_name LPAR argumentList RPAR . SEMICOLON

    SEMICOLON       shift and go to state 251


state 222

    (94) argumentList -> expression arguments .

    RPAR            reduce using rule 94 (argumentList -> expression arguments .)


state 223

    (96) arguments -> epsilon .

    RPAR            reduce using rule 96 (arguments -> epsilon .)


state 224

    (95) arguments -> COMMA . expression arguments
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 252

state 225

    (32) if_statement -> IF expression RPAR M_if . block_or_statement
    (34) ifelse_statement -> IF expression RPAR M_if . block_or_statement ELSE M_else block_or_statement
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 254
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 256
    die                            shift and go to state 12
    chomp                          shift and go to state 45
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 226

    (33) M_if -> epsilon .

    SEMICOLON       reduce using rule 33 (M_if -> epsilon .)
    BLOCK_BEGIN     reduce using rule 33 (M_if -> epsilon .)
    FOREACH         reduce using rule 33 (M_if -> epsilon .)
    MY              reduce using rule 33 (M_if -> epsilon .)
    SCALAR_VARIABLE reduce using rule 33 (M_if -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 33 (M_if -> epsilon .)
    HASH_VARIABLE   reduce using rule 33 (M_if -> epsilon .)
    BREAK           reduce using rule 33 (M_if -> epsilon .)
    CONTINUE        reduce using rule 33 (M_if -> epsilon .)
    PRINT           reduce using rule 33 (M_if -> epsilon .)
    RETURN          reduce using rule 33 (M_if -> epsilon .)
    DIE             reduce using rule 33 (M_if -> epsilon .)
    CHOMP           reduce using rule 33 (M_if -> epsilon .)
    MINUS           reduce using rule 33 (M_if -> epsilon .)
    INCREAMENT      reduce using rule 33 (M_if -> epsilon .)
    DCREAMENT       reduce using rule 33 (M_if -> epsilon .)
    NOT             reduce using rule 33 (M_if -> epsilon .)
    LPAR            reduce using rule 33 (M_if -> epsilon .)
    INPUT           reduce using rule 33 (M_if -> epsilon .)
    USE             reduce using rule 33 (M_if -> epsilon .)
    WHILE           reduce using rule 33 (M_if -> epsilon .)
    DO              reduce using rule 33 (M_if -> epsilon .)
    FOR             reduce using rule 33 (M_if -> epsilon .)
    SWITCH          reduce using rule 33 (M_if -> epsilon .)
    IF              reduce using rule 33 (M_if -> epsilon .)
    IDENTIFIER      reduce using rule 33 (M_if -> epsilon .)
    INTEGER         reduce using rule 33 (M_if -> epsilon .)
    FLOAT           reduce using rule 33 (M_if -> epsilon .)
    HEXADECIMAL     reduce using rule 33 (M_if -> epsilon .)
    OCTAL           reduce using rule 33 (M_if -> epsilon .)
    BINARY          reduce using rule 33 (M_if -> epsilon .)
    EXPONANTIAL     reduce using rule 33 (M_if -> epsilon .)
    STRING          reduce using rule 33 (M_if -> epsilon .)
    PSEUDO_STRING   reduce using rule 33 (M_if -> epsilon .)


state 227

    (120) expression -> expression Q_MARK M_QMARK expression . COLON M_COLON expression
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    COLON           shift and go to state 257
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 228

    (58) statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER . RPAR block_or_statement

    RPAR            shift and go to state 258


state 229

    (56) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE . RPAR block_or_statement
    (57) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE . RPAR SEMICOLON

    RPAR            shift and go to state 259


state 230

    (55) statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR . block_or_statement
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 254
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 260
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 231

    (44) for_statement -> FOR LPAR assignment M_QUAD expression . SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD expression . SEMICOLON M_for expression RPAR SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    SEMICOLON       shift and go to state 261
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 232

    (77) assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR . SEMICOLON

    SEMICOLON       shift and go to state 262


state 233

    (87) hashList -> expression COMMA . expression COMMA hashList
    (88) hashList -> expression COMMA . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 263

state 234

    (71) assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList . RPAR SEMICOLON

    RPAR            shift and go to state 264


state 235

    (72) assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .

    ELSE            reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FOREACH         reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    MY              reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    HASH_VARIABLE   reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BREAK           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    CONTINUE        reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    PRINT           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    RETURN          reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DIE             reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    CHOMP           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    MINUS           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INCREAMENT      reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DCREAMENT       reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    NOT             reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    LPAR            reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INPUT           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    USE             reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    WHILE           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    DO              reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FOR             reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SWITCH          reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    IF              reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    IDENTIFIER      reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    INTEGER         reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    FLOAT           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    HEXADECIMAL     reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    OCTAL           reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BINARY          reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    EXPONANTIAL     reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    STRING          reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    PSEUDO_STRING   reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    SUB             reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    $end            reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)
    BLOCK_END       reduce using rule 72 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON .)


state 236

    (70) assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .

    ELSE            reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FOREACH         reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    MY              reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    HASH_VARIABLE   reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BREAK           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    CONTINUE        reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    PRINT           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    RETURN          reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DIE             reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    CHOMP           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    MINUS           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INCREAMENT      reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DCREAMENT       reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    NOT             reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    LPAR            reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INPUT           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    USE             reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    DO              reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FOR             reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SWITCH          reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    IDENTIFIER      reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    INTEGER         reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    FLOAT           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    HEXADECIMAL     reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    OCTAL           reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BINARY          reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    EXPONANTIAL     reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    STRING          reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    PSEUDO_STRING   reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    SUB             reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    $end            reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)
    BLOCK_END       reduce using rule 70 (assignment -> MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON .)


state 237

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER . DOUBLE_DOT INTEGER RPAR SEMICOLON
    (136) constant -> INTEGER .

    DOUBLE_DOT      shift and go to state 265
    INCREAMENT      reduce using rule 136 (constant -> INTEGER .)
    DCREAMENT       reduce using rule 136 (constant -> INTEGER .)
    PLUS            reduce using rule 136 (constant -> INTEGER .)
    MINUS           reduce using rule 136 (constant -> INTEGER .)
    MULTIPLY        reduce using rule 136 (constant -> INTEGER .)
    DIVIDE          reduce using rule 136 (constant -> INTEGER .)
    MODULUS         reduce using rule 136 (constant -> INTEGER .)
    EXPONENT        reduce using rule 136 (constant -> INTEGER .)
    Q_MARK          reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN reduce using rule 136 (constant -> INTEGER .)
    OP_GREATER_THAN_E reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN    reduce using rule 136 (constant -> INTEGER .)
    OP_LESS_THAN_E  reduce using rule 136 (constant -> INTEGER .)
    EQUAL           reduce using rule 136 (constant -> INTEGER .)
    NOT_EQUAL       reduce using rule 136 (constant -> INTEGER .)
    STRING_CMP      reduce using rule 136 (constant -> INTEGER .)
    AND             reduce using rule 136 (constant -> INTEGER .)
    OR              reduce using rule 136 (constant -> INTEGER .)
    COMMA           reduce using rule 136 (constant -> INTEGER .)
    RPAR            reduce using rule 136 (constant -> INTEGER .)


state 238

    (68) assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 266


state 239

    (69) assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 267


state 240

    (66) assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .

    ELSE            reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FOREACH         reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    MY              reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    HASH_VARIABLE   reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BREAK           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    CONTINUE        reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    PRINT           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    RETURN          reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DIE             reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    CHOMP           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    MINUS           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INCREAMENT      reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DCREAMENT       reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    NOT             reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    LPAR            reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INPUT           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    USE             reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    WHILE           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    DO              reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FOR             reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SWITCH          reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    IF              reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    IDENTIFIER      reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    INTEGER         reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    FLOAT           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    HEXADECIMAL     reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    OCTAL           reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BINARY          reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    EXPONANTIAL     reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    STRING          reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    PSEUDO_STRING   reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    SUB             reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    $end            reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)
    BLOCK_END       reduce using rule 66 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON .)


state 241

    (101) subroutine -> SUB marker identifier M_sub block . marker1
    (105) marker1 -> . epsilon
    (147) epsilon -> .

    SUB             reduce using rule 147 (epsilon -> .)
    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)
    $end            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 268
    marker1                        shift and go to state 269

state 242

    (7) block -> BLOCK_BEGIN statements BLOCK_END .

    ELSE            reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    FOREACH         reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    MY              reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    SCALAR_VARIABLE reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    ARRAY_VARIABLE  reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    HASH_VARIABLE   reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    BREAK           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    CONTINUE        reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    PRINT           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    RETURN          reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    DIE             reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    CHOMP           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    MINUS           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    INCREAMENT      reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    DCREAMENT       reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    NOT             reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    LPAR            reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    INPUT           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    USE             reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    WHILE           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    DO              reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    FOR             reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    SWITCH          reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    IF              reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    IDENTIFIER      reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    INTEGER         reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    FLOAT           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    HEXADECIMAL     reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    OCTAL           reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    BINARY          reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    EXPONANTIAL     reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    STRING          reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    PSEUDO_STRING   reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    SUB             reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    $end            reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    BLOCK_END       reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)
    CASE            reduce using rule 7 (block -> BLOCK_BEGIN statements BLOCK_END .)


state 243

    (43) do_while_statement -> DO M_QUAD block WHILE LPAR . expression RPAR M_whileBranch SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 270

state 244

    (40) while_statement -> WHILE M_QUAD LPAR expression RPAR . M_whileBranch block_or_statement
    (41) M_whileBranch -> . epsilon
    (147) epsilon -> .

    SEMICOLON       reduce using rule 147 (epsilon -> .)
    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)
    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 272
    M_whileBranch                  shift and go to state 271

state 245

    (83) arrayList -> array_expression COMMA . arrayList
    (83) arrayList -> . array_expression COMMA arrayList
    (84) arrayList -> . array_expression
    (86) arrayList -> . epsilon
    (85) array_expression -> . expression
    (147) epsilon -> .
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    RPAR            reduce using rule 147 (epsilon -> .)
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    epsilon                        shift and go to state 213
    arrayList                      shift and go to state 273
    expression                     shift and go to state 216
    array_expression               shift and go to state 212

state 246

    (82) array -> LPAR arrayList RPAR .

    SEMICOLON       reduce using rule 82 (array -> LPAR arrayList RPAR .)


state 247

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT . INTEGER RPAR SEMICOLON

    INTEGER         shift and go to state 274


state 248

    (78) assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .

    ELSE            reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    MY              reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DIE             reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    NOT             reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    USE             reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DO              reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FOR             reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    IF              reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    STRING          reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SUB             reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    $end            reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 78 (assignment -> ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)


state 249

    (79) assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .

    ELSE            reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    MY              reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DIE             reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    NOT             reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    USE             reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DO              reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FOR             reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    IF              reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    STRING          reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SUB             reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    $end            reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 79 (assignment -> ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)


state 250

    (59) switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN . cases BLOCK_END
    (60) cases -> . case_block M_QUAD cases
    (61) cases -> . case_block M_QUAD
    (62) cases -> . ELSE block M_QUAD
    (63) case_block -> . CASE switch_expression M_switch block

    ELSE            shift and go to state 277
    CASE            shift and go to state 278

    case_block                     shift and go to state 275
    cases                          shift and go to state 276

state 251

    (91) function_call -> function_name LPAR argumentList RPAR SEMICOLON .

    SEMICOLON       reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    ELSE            reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    FOREACH         reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    MY              reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    HASH_VARIABLE   reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    BREAK           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    CONTINUE        reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    PRINT           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    RETURN          reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    DIE             reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    CHOMP           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    MINUS           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    INCREAMENT      reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    DCREAMENT       reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    NOT             reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    LPAR            reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    INPUT           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    USE             reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    WHILE           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    DO              reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    FOR             reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    SWITCH          reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    IF              reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    IDENTIFIER      reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    INTEGER         reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    FLOAT           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    HEXADECIMAL     reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    OCTAL           reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    BINARY          reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    EXPONANTIAL     reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    STRING          reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    PSEUDO_STRING   reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    SUB             reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    $end            reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)
    BLOCK_END       reduce using rule 91 (function_call -> function_name LPAR argumentList RPAR SEMICOLON .)


state 252

    (95) arguments -> COMMA expression . arguments
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression
    (95) arguments -> . COMMA expression arguments
    (96) arguments -> . epsilon
    (147) epsilon -> .

    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132
    COMMA           shift and go to state 224
    RPAR            reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 223
    arguments                      shift and go to state 279

state 253

    (29) block_or_statement -> block .

    ELSE            reduce using rule 29 (block_or_statement -> block .)
    FOREACH         reduce using rule 29 (block_or_statement -> block .)
    MY              reduce using rule 29 (block_or_statement -> block .)
    SCALAR_VARIABLE reduce using rule 29 (block_or_statement -> block .)
    ARRAY_VARIABLE  reduce using rule 29 (block_or_statement -> block .)
    HASH_VARIABLE   reduce using rule 29 (block_or_statement -> block .)
    BREAK           reduce using rule 29 (block_or_statement -> block .)
    CONTINUE        reduce using rule 29 (block_or_statement -> block .)
    PRINT           reduce using rule 29 (block_or_statement -> block .)
    RETURN          reduce using rule 29 (block_or_statement -> block .)
    DIE             reduce using rule 29 (block_or_statement -> block .)
    CHOMP           reduce using rule 29 (block_or_statement -> block .)
    MINUS           reduce using rule 29 (block_or_statement -> block .)
    INCREAMENT      reduce using rule 29 (block_or_statement -> block .)
    DCREAMENT       reduce using rule 29 (block_or_statement -> block .)
    NOT             reduce using rule 29 (block_or_statement -> block .)
    LPAR            reduce using rule 29 (block_or_statement -> block .)
    INPUT           reduce using rule 29 (block_or_statement -> block .)
    USE             reduce using rule 29 (block_or_statement -> block .)
    WHILE           reduce using rule 29 (block_or_statement -> block .)
    DO              reduce using rule 29 (block_or_statement -> block .)
    FOR             reduce using rule 29 (block_or_statement -> block .)
    SWITCH          reduce using rule 29 (block_or_statement -> block .)
    IF              reduce using rule 29 (block_or_statement -> block .)
    IDENTIFIER      reduce using rule 29 (block_or_statement -> block .)
    INTEGER         reduce using rule 29 (block_or_statement -> block .)
    FLOAT           reduce using rule 29 (block_or_statement -> block .)
    HEXADECIMAL     reduce using rule 29 (block_or_statement -> block .)
    OCTAL           reduce using rule 29 (block_or_statement -> block .)
    BINARY          reduce using rule 29 (block_or_statement -> block .)
    EXPONANTIAL     reduce using rule 29 (block_or_statement -> block .)
    STRING          reduce using rule 29 (block_or_statement -> block .)
    PSEUDO_STRING   reduce using rule 29 (block_or_statement -> block .)
    SUB             reduce using rule 29 (block_or_statement -> block .)
    $end            reduce using rule 29 (block_or_statement -> block .)
    BLOCK_END       reduce using rule 29 (block_or_statement -> block .)


state 254

    (31) block_or_statement -> SEMICOLON .

    ELSE            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOREACH         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MY              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 31 (block_or_statement -> SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HASH_VARIABLE   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BREAK           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PRINT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    RETURN          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DIE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CHOMP           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MINUS           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INCREAMENT      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DCREAMENT       reduce using rule 31 (block_or_statement -> SEMICOLON .)
    NOT             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    LPAR            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INPUT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    USE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    WHILE           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DO              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOR             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SWITCH          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IF              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INTEGER         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FLOAT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HEXADECIMAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    OCTAL           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BINARY          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    EXPONANTIAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    STRING          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PSEUDO_STRING   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SUB             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    $end            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BLOCK_END       reduce using rule 31 (block_or_statement -> SEMICOLON .)


state 255

    (30) block_or_statement -> statement .

    ELSE            reduce using rule 30 (block_or_statement -> statement .)
    FOREACH         reduce using rule 30 (block_or_statement -> statement .)
    MY              reduce using rule 30 (block_or_statement -> statement .)
    SCALAR_VARIABLE reduce using rule 30 (block_or_statement -> statement .)
    ARRAY_VARIABLE  reduce using rule 30 (block_or_statement -> statement .)
    HASH_VARIABLE   reduce using rule 30 (block_or_statement -> statement .)
    BREAK           reduce using rule 30 (block_or_statement -> statement .)
    CONTINUE        reduce using rule 30 (block_or_statement -> statement .)
    PRINT           reduce using rule 30 (block_or_statement -> statement .)
    RETURN          reduce using rule 30 (block_or_statement -> statement .)
    DIE             reduce using rule 30 (block_or_statement -> statement .)
    CHOMP           reduce using rule 30 (block_or_statement -> statement .)
    MINUS           reduce using rule 30 (block_or_statement -> statement .)
    INCREAMENT      reduce using rule 30 (block_or_statement -> statement .)
    DCREAMENT       reduce using rule 30 (block_or_statement -> statement .)
    NOT             reduce using rule 30 (block_or_statement -> statement .)
    LPAR            reduce using rule 30 (block_or_statement -> statement .)
    INPUT           reduce using rule 30 (block_or_statement -> statement .)
    USE             reduce using rule 30 (block_or_statement -> statement .)
    WHILE           reduce using rule 30 (block_or_statement -> statement .)
    DO              reduce using rule 30 (block_or_statement -> statement .)
    FOR             reduce using rule 30 (block_or_statement -> statement .)
    SWITCH          reduce using rule 30 (block_or_statement -> statement .)
    IF              reduce using rule 30 (block_or_statement -> statement .)
    IDENTIFIER      reduce using rule 30 (block_or_statement -> statement .)
    INTEGER         reduce using rule 30 (block_or_statement -> statement .)
    FLOAT           reduce using rule 30 (block_or_statement -> statement .)
    HEXADECIMAL     reduce using rule 30 (block_or_statement -> statement .)
    OCTAL           reduce using rule 30 (block_or_statement -> statement .)
    BINARY          reduce using rule 30 (block_or_statement -> statement .)
    EXPONANTIAL     reduce using rule 30 (block_or_statement -> statement .)
    STRING          reduce using rule 30 (block_or_statement -> statement .)
    PSEUDO_STRING   reduce using rule 30 (block_or_statement -> statement .)
    SUB             reduce using rule 30 (block_or_statement -> statement .)
    $end            reduce using rule 30 (block_or_statement -> statement .)
    BLOCK_END       reduce using rule 30 (block_or_statement -> statement .)


state 256

    (32) if_statement -> IF expression RPAR M_if block_or_statement .
    (34) ifelse_statement -> IF expression RPAR M_if block_or_statement . ELSE M_else block_or_statement

  ! shift/reduce conflict for ELSE resolved as shift
    FOREACH         reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    MY              reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    SCALAR_VARIABLE reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    HASH_VARIABLE   reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    BREAK           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    CONTINUE        reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    PRINT           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    RETURN          reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    DIE             reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    CHOMP           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    MINUS           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    INCREAMENT      reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    DCREAMENT       reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    NOT             reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    LPAR            reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    INPUT           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    USE             reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    WHILE           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    DO              reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    FOR             reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    SWITCH          reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    IF              reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    IDENTIFIER      reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    INTEGER         reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    FLOAT           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    HEXADECIMAL     reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    OCTAL           reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    BINARY          reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    EXPONANTIAL     reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    STRING          reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    PSEUDO_STRING   reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    SUB             reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    $end            reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    BLOCK_END       reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .)
    ELSE            shift and go to state 280

  ! ELSE            [ reduce using rule 32 (if_statement -> IF expression RPAR M_if block_or_statement .) ]


state 257

    (120) expression -> expression Q_MARK M_QMARK expression COLON . M_COLON expression
    (122) M_COLON -> . epsilon
    (147) epsilon -> .

    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 281
    M_COLON                        shift and go to state 282

state 258

    (58) statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR . block_or_statement
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 254
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 283
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 259

    (56) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR . block_or_statement
    (57) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR . SEMICOLON
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 284
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 285
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 260

    (55) statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .

    ELSE            reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    FOREACH         reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    MY              reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    SCALAR_VARIABLE reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    HASH_VARIABLE   reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    BREAK           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    CONTINUE        reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    PRINT           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    RETURN          reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    DIE             reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    CHOMP           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    MINUS           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    INCREAMENT      reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    DCREAMENT       reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    NOT             reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    LPAR            reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    INPUT           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    USE             reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    WHILE           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    DO              reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    FOR             reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    SWITCH          reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    IF              reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    IDENTIFIER      reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    INTEGER         reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    FLOAT           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    HEXADECIMAL     reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    OCTAL           reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    BINARY          reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    EXPONANTIAL     reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    STRING          reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    PSEUDO_STRING   reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    SUB             reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    $end            reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)
    BLOCK_END       reduce using rule 55 (statement -> FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement .)


state 261

    (44) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON . M_for expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON . M_for expression RPAR SEMICOLON
    (42) M_for -> . epsilon
    (147) epsilon -> .

    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 286
    M_for                          shift and go to state 287

state 262

    (77) assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .

    ELSE            reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FOREACH         reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    MY              reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    HASH_VARIABLE   reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BREAK           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    CONTINUE        reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    PRINT           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    RETURN          reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DIE             reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    CHOMP           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    MINUS           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INCREAMENT      reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DCREAMENT       reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    NOT             reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    LPAR            reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INPUT           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    USE             reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    WHILE           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DO              reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FOR             reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SWITCH          reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    IF              reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    IDENTIFIER      reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INTEGER         reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FLOAT           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    HEXADECIMAL     reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    OCTAL           reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BINARY          reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    EXPONANTIAL     reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    STRING          reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    PSEUDO_STRING   reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SUB             reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    $end            reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BLOCK_END       reduce using rule 77 (assignment -> HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)


state 263

    (87) hashList -> expression COMMA expression . COMMA hashList
    (88) hashList -> expression COMMA expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    COMMA           shift and go to state 288
    RPAR            reduce using rule 88 (hashList -> expression COMMA expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 264

    (71) assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR . SEMICOLON

    SEMICOLON       shift and go to state 289


state 265

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT . INTEGER RPAR SEMICOLON

    INTEGER         shift and go to state 290


state 266

    (68) assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .

    ELSE            reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    MY              reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DIE             reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    NOT             reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    USE             reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    DO              reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FOR             reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    IF              reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    STRING          reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    SUB             reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    $end            reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 68 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON .)


state 267

    (69) assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .

    ELSE            reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FOREACH         reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    MY              reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    HASH_VARIABLE   reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BREAK           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    CONTINUE        reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    PRINT           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    RETURN          reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DIE             reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    CHOMP           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    MINUS           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INCREAMENT      reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DCREAMENT       reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    NOT             reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    LPAR            reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INPUT           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    USE             reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    WHILE           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    DO              reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FOR             reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SWITCH          reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    IF              reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    IDENTIFIER      reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    INTEGER         reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    FLOAT           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    HEXADECIMAL     reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    OCTAL           reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BINARY          reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    EXPONANTIAL     reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    STRING          reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    PSEUDO_STRING   reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    SUB             reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    $end            reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)
    BLOCK_END       reduce using rule 69 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON .)


state 268

    (105) marker1 -> epsilon .

    SUB             reduce using rule 105 (marker1 -> epsilon .)
    FOREACH         reduce using rule 105 (marker1 -> epsilon .)
    MY              reduce using rule 105 (marker1 -> epsilon .)
    SCALAR_VARIABLE reduce using rule 105 (marker1 -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 105 (marker1 -> epsilon .)
    HASH_VARIABLE   reduce using rule 105 (marker1 -> epsilon .)
    BREAK           reduce using rule 105 (marker1 -> epsilon .)
    CONTINUE        reduce using rule 105 (marker1 -> epsilon .)
    PRINT           reduce using rule 105 (marker1 -> epsilon .)
    RETURN          reduce using rule 105 (marker1 -> epsilon .)
    DIE             reduce using rule 105 (marker1 -> epsilon .)
    CHOMP           reduce using rule 105 (marker1 -> epsilon .)
    MINUS           reduce using rule 105 (marker1 -> epsilon .)
    INCREAMENT      reduce using rule 105 (marker1 -> epsilon .)
    DCREAMENT       reduce using rule 105 (marker1 -> epsilon .)
    NOT             reduce using rule 105 (marker1 -> epsilon .)
    LPAR            reduce using rule 105 (marker1 -> epsilon .)
    INPUT           reduce using rule 105 (marker1 -> epsilon .)
    USE             reduce using rule 105 (marker1 -> epsilon .)
    WHILE           reduce using rule 105 (marker1 -> epsilon .)
    DO              reduce using rule 105 (marker1 -> epsilon .)
    FOR             reduce using rule 105 (marker1 -> epsilon .)
    SWITCH          reduce using rule 105 (marker1 -> epsilon .)
    IF              reduce using rule 105 (marker1 -> epsilon .)
    IDENTIFIER      reduce using rule 105 (marker1 -> epsilon .)
    INTEGER         reduce using rule 105 (marker1 -> epsilon .)
    FLOAT           reduce using rule 105 (marker1 -> epsilon .)
    HEXADECIMAL     reduce using rule 105 (marker1 -> epsilon .)
    OCTAL           reduce using rule 105 (marker1 -> epsilon .)
    BINARY          reduce using rule 105 (marker1 -> epsilon .)
    EXPONANTIAL     reduce using rule 105 (marker1 -> epsilon .)
    STRING          reduce using rule 105 (marker1 -> epsilon .)
    PSEUDO_STRING   reduce using rule 105 (marker1 -> epsilon .)
    $end            reduce using rule 105 (marker1 -> epsilon .)


state 269

    (101) subroutine -> SUB marker identifier M_sub block marker1 .

    SUB             reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    FOREACH         reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    MY              reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    SCALAR_VARIABLE reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    ARRAY_VARIABLE  reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    HASH_VARIABLE   reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    BREAK           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    CONTINUE        reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    PRINT           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    RETURN          reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    DIE             reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    CHOMP           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    MINUS           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    INCREAMENT      reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    DCREAMENT       reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    NOT             reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    LPAR            reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    INPUT           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    USE             reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    WHILE           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    DO              reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    FOR             reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    SWITCH          reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    IF              reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    IDENTIFIER      reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    INTEGER         reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    FLOAT           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    HEXADECIMAL     reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    OCTAL           reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    BINARY          reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    EXPONANTIAL     reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    STRING          reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    PSEUDO_STRING   reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)
    $end            reduce using rule 101 (subroutine -> SUB marker identifier M_sub block marker1 .)


state 270

    (43) do_while_statement -> DO M_QUAD block WHILE LPAR expression . RPAR M_whileBranch SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    RPAR            shift and go to state 291
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 271

    (40) while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch . block_or_statement
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 254
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 292
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 272

    (41) M_whileBranch -> epsilon .

    SEMICOLON       reduce using rule 41 (M_whileBranch -> epsilon .)
    BLOCK_BEGIN     reduce using rule 41 (M_whileBranch -> epsilon .)
    FOREACH         reduce using rule 41 (M_whileBranch -> epsilon .)
    MY              reduce using rule 41 (M_whileBranch -> epsilon .)
    SCALAR_VARIABLE reduce using rule 41 (M_whileBranch -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 41 (M_whileBranch -> epsilon .)
    HASH_VARIABLE   reduce using rule 41 (M_whileBranch -> epsilon .)
    BREAK           reduce using rule 41 (M_whileBranch -> epsilon .)
    CONTINUE        reduce using rule 41 (M_whileBranch -> epsilon .)
    PRINT           reduce using rule 41 (M_whileBranch -> epsilon .)
    RETURN          reduce using rule 41 (M_whileBranch -> epsilon .)
    DIE             reduce using rule 41 (M_whileBranch -> epsilon .)
    CHOMP           reduce using rule 41 (M_whileBranch -> epsilon .)
    MINUS           reduce using rule 41 (M_whileBranch -> epsilon .)
    INCREAMENT      reduce using rule 41 (M_whileBranch -> epsilon .)
    DCREAMENT       reduce using rule 41 (M_whileBranch -> epsilon .)
    NOT             reduce using rule 41 (M_whileBranch -> epsilon .)
    LPAR            reduce using rule 41 (M_whileBranch -> epsilon .)
    INPUT           reduce using rule 41 (M_whileBranch -> epsilon .)
    USE             reduce using rule 41 (M_whileBranch -> epsilon .)
    WHILE           reduce using rule 41 (M_whileBranch -> epsilon .)
    DO              reduce using rule 41 (M_whileBranch -> epsilon .)
    FOR             reduce using rule 41 (M_whileBranch -> epsilon .)
    SWITCH          reduce using rule 41 (M_whileBranch -> epsilon .)
    IF              reduce using rule 41 (M_whileBranch -> epsilon .)
    IDENTIFIER      reduce using rule 41 (M_whileBranch -> epsilon .)
    INTEGER         reduce using rule 41 (M_whileBranch -> epsilon .)
    FLOAT           reduce using rule 41 (M_whileBranch -> epsilon .)
    HEXADECIMAL     reduce using rule 41 (M_whileBranch -> epsilon .)
    OCTAL           reduce using rule 41 (M_whileBranch -> epsilon .)
    BINARY          reduce using rule 41 (M_whileBranch -> epsilon .)
    EXPONANTIAL     reduce using rule 41 (M_whileBranch -> epsilon .)
    STRING          reduce using rule 41 (M_whileBranch -> epsilon .)
    PSEUDO_STRING   reduce using rule 41 (M_whileBranch -> epsilon .)


state 273

    (83) arrayList -> array_expression COMMA arrayList .

    RPAR            reduce using rule 83 (arrayList -> array_expression COMMA arrayList .)


state 274

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER . RPAR SEMICOLON

    RPAR            shift and go to state 293


state 275

    (60) cases -> case_block . M_QUAD cases
    (61) cases -> case_block . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    ELSE            reduce using rule 147 (epsilon -> .)
    CASE            reduce using rule 147 (epsilon -> .)
    BLOCK_END       reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 294

state 276

    (59) switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases . BLOCK_END

    BLOCK_END       shift and go to state 295


state 277

    (62) cases -> ELSE . block M_QUAD
    (7) block -> . BLOCK_BEGIN statements BLOCK_END

    BLOCK_BEGIN     shift and go to state 152

    block                          shift and go to state 296

state 278

    (63) case_block -> CASE . switch_expression M_switch block
    (64) switch_expression -> . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    switch_expression              shift and go to state 297
    constant                       shift and go to state 51
    expression                     shift and go to state 298

state 279

    (95) arguments -> COMMA expression arguments .

    RPAR            reduce using rule 95 (arguments -> COMMA expression arguments .)


state 280

    (34) ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE . M_else block_or_statement
    (39) M_else -> . epsilon
    (147) epsilon -> .

    SEMICOLON       reduce using rule 147 (epsilon -> .)
    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)
    FOREACH         reduce using rule 147 (epsilon -> .)
    MY              reduce using rule 147 (epsilon -> .)
    SCALAR_VARIABLE reduce using rule 147 (epsilon -> .)
    ARRAY_VARIABLE  reduce using rule 147 (epsilon -> .)
    HASH_VARIABLE   reduce using rule 147 (epsilon -> .)
    BREAK           reduce using rule 147 (epsilon -> .)
    CONTINUE        reduce using rule 147 (epsilon -> .)
    PRINT           reduce using rule 147 (epsilon -> .)
    RETURN          reduce using rule 147 (epsilon -> .)
    DIE             reduce using rule 147 (epsilon -> .)
    CHOMP           reduce using rule 147 (epsilon -> .)
    MINUS           reduce using rule 147 (epsilon -> .)
    INCREAMENT      reduce using rule 147 (epsilon -> .)
    DCREAMENT       reduce using rule 147 (epsilon -> .)
    NOT             reduce using rule 147 (epsilon -> .)
    LPAR            reduce using rule 147 (epsilon -> .)
    INPUT           reduce using rule 147 (epsilon -> .)
    USE             reduce using rule 147 (epsilon -> .)
    WHILE           reduce using rule 147 (epsilon -> .)
    DO              reduce using rule 147 (epsilon -> .)
    FOR             reduce using rule 147 (epsilon -> .)
    SWITCH          reduce using rule 147 (epsilon -> .)
    IF              reduce using rule 147 (epsilon -> .)
    IDENTIFIER      reduce using rule 147 (epsilon -> .)
    INTEGER         reduce using rule 147 (epsilon -> .)
    FLOAT           reduce using rule 147 (epsilon -> .)
    HEXADECIMAL     reduce using rule 147 (epsilon -> .)
    OCTAL           reduce using rule 147 (epsilon -> .)
    BINARY          reduce using rule 147 (epsilon -> .)
    EXPONANTIAL     reduce using rule 147 (epsilon -> .)
    STRING          reduce using rule 147 (epsilon -> .)
    PSEUDO_STRING   reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 299
    M_else                         shift and go to state 300

state 281

    (122) M_COLON -> epsilon .

    MINUS           reduce using rule 122 (M_COLON -> epsilon .)
    INCREAMENT      reduce using rule 122 (M_COLON -> epsilon .)
    DCREAMENT       reduce using rule 122 (M_COLON -> epsilon .)
    NOT             reduce using rule 122 (M_COLON -> epsilon .)
    LPAR            reduce using rule 122 (M_COLON -> epsilon .)
    SCALAR_VARIABLE reduce using rule 122 (M_COLON -> epsilon .)
    INPUT           reduce using rule 122 (M_COLON -> epsilon .)
    INTEGER         reduce using rule 122 (M_COLON -> epsilon .)
    FLOAT           reduce using rule 122 (M_COLON -> epsilon .)
    HEXADECIMAL     reduce using rule 122 (M_COLON -> epsilon .)
    OCTAL           reduce using rule 122 (M_COLON -> epsilon .)
    BINARY          reduce using rule 122 (M_COLON -> epsilon .)
    EXPONANTIAL     reduce using rule 122 (M_COLON -> epsilon .)
    STRING          reduce using rule 122 (M_COLON -> epsilon .)
    PSEUDO_STRING   reduce using rule 122 (M_COLON -> epsilon .)


state 282

    (120) expression -> expression Q_MARK M_QMARK expression COLON M_COLON . expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 301

state 283

    (58) statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .

    ELSE            reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    FOREACH         reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    MY              reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    SCALAR_VARIABLE reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    HASH_VARIABLE   reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    BREAK           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    CONTINUE        reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    PRINT           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    RETURN          reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    DIE             reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    CHOMP           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    MINUS           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    INCREAMENT      reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    DCREAMENT       reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    NOT             reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    LPAR            reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    INPUT           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    USE             reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    WHILE           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    DO              reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    FOR             reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    SWITCH          reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    IF              reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    IDENTIFIER      reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    INTEGER         reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    FLOAT           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    HEXADECIMAL     reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    OCTAL           reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    BINARY          reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    EXPONANTIAL     reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    STRING          reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    PSEUDO_STRING   reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    SUB             reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    $end            reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)
    BLOCK_END       reduce using rule 58 (statement -> FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement .)


state 284

    (57) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .
    (31) block_or_statement -> SEMICOLON .

  ! reduce/reduce conflict for ELSE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for MY resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SCALAR_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ARRAY_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for HASH_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DIE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CHOMP resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCREAMENT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DCREAMENT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for LPAR resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INPUT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for HEXADECIMAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for OCTAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BINARY resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXPONANTIAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PSEUDO_STRING resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SUB resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BLOCK_END resolved using rule 31 (block_or_statement -> SEMICOLON .)
    ELSE            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOREACH         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MY              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 31 (block_or_statement -> SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HASH_VARIABLE   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BREAK           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PRINT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    RETURN          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DIE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CHOMP           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MINUS           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INCREAMENT      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DCREAMENT       reduce using rule 31 (block_or_statement -> SEMICOLON .)
    NOT             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    LPAR            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INPUT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    USE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    WHILE           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DO              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOR             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SWITCH          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IF              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INTEGER         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FLOAT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HEXADECIMAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    OCTAL           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BINARY          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    EXPONANTIAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    STRING          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PSEUDO_STRING   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SUB             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    $end            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BLOCK_END       reduce using rule 31 (block_or_statement -> SEMICOLON .)

  ! ELSE            [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! MY              [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! SCALAR_VARIABLE [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! ARRAY_VARIABLE  [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! HASH_VARIABLE   [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! BREAK           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! PRINT           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! RETURN          [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! DIE             [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! CHOMP           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! MINUS           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! INCREAMENT      [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! DCREAMENT       [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! NOT             [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! LPAR            [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! INPUT           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! USE             [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! WHILE           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! DO              [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! FOR             [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! IF              [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! HEXADECIMAL     [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! OCTAL           [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! BINARY          [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! EXPONANTIAL     [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! STRING          [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! PSEUDO_STRING   [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! SUB             [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! $end            [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]
  ! BLOCK_END       [ reduce using rule 57 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON .) ]


state 285

    (56) statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .

    ELSE            reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    FOREACH         reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    MY              reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    SCALAR_VARIABLE reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    HASH_VARIABLE   reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    BREAK           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    CONTINUE        reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    PRINT           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    RETURN          reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    DIE             reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    CHOMP           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    MINUS           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    INCREAMENT      reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    DCREAMENT       reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    NOT             reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    LPAR            reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    INPUT           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    USE             reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    WHILE           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    DO              reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    FOR             reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    SWITCH          reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    IF              reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    IDENTIFIER      reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    INTEGER         reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    FLOAT           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    HEXADECIMAL     reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    OCTAL           reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    BINARY          reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    EXPONANTIAL     reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    STRING          reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    PSEUDO_STRING   reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    SUB             reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    $end            reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)
    BLOCK_END       reduce using rule 56 (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement .)


state 286

    (42) M_for -> epsilon .

    MINUS           reduce using rule 42 (M_for -> epsilon .)
    INCREAMENT      reduce using rule 42 (M_for -> epsilon .)
    DCREAMENT       reduce using rule 42 (M_for -> epsilon .)
    NOT             reduce using rule 42 (M_for -> epsilon .)
    LPAR            reduce using rule 42 (M_for -> epsilon .)
    SCALAR_VARIABLE reduce using rule 42 (M_for -> epsilon .)
    INPUT           reduce using rule 42 (M_for -> epsilon .)
    INTEGER         reduce using rule 42 (M_for -> epsilon .)
    FLOAT           reduce using rule 42 (M_for -> epsilon .)
    HEXADECIMAL     reduce using rule 42 (M_for -> epsilon .)
    OCTAL           reduce using rule 42 (M_for -> epsilon .)
    BINARY          reduce using rule 42 (M_for -> epsilon .)
    EXPONANTIAL     reduce using rule 42 (M_for -> epsilon .)
    STRING          reduce using rule 42 (M_for -> epsilon .)
    PSEUDO_STRING   reduce using rule 42 (M_for -> epsilon .)


state 287

    (44) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for . expression RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for . expression RPAR SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    constant                       shift and go to state 51
    expression                     shift and go to state 302

state 288

    (87) hashList -> expression COMMA expression COMMA . hashList
    (87) hashList -> . expression COMMA expression COMMA hashList
    (88) hashList -> . expression COMMA expression
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    SCALAR_VARIABLE shift and go to state 59
    INPUT           shift and go to state 26
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    hashList                       shift and go to state 303
    constant                       shift and go to state 51
    expression                     shift and go to state 196

state 289

    (71) assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .

    ELSE            reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FOREACH         reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    MY              reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    HASH_VARIABLE   reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BREAK           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    CONTINUE        reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    PRINT           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    RETURN          reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DIE             reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    CHOMP           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    MINUS           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INCREAMENT      reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DCREAMENT       reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    NOT             reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    LPAR            reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INPUT           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    USE             reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    WHILE           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    DO              reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FOR             reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SWITCH          reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    IF              reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    IDENTIFIER      reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    INTEGER         reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    FLOAT           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    HEXADECIMAL     reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    OCTAL           reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BINARY          reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    EXPONANTIAL     reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    STRING          reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    PSEUDO_STRING   reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    SUB             reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    $end            reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)
    BLOCK_END       reduce using rule 71 (assignment -> MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON .)


state 290

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER . RPAR SEMICOLON

    RPAR            shift and go to state 304


state 291

    (43) do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR . M_whileBranch SEMICOLON
    (41) M_whileBranch -> . epsilon
    (147) epsilon -> .

    SEMICOLON       reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 272
    M_whileBranch                  shift and go to state 305

state 292

    (40) while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .

    ELSE            reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    FOREACH         reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    MY              reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    SCALAR_VARIABLE reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    HASH_VARIABLE   reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    BREAK           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    CONTINUE        reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    PRINT           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    RETURN          reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    DIE             reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    CHOMP           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    MINUS           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    INCREAMENT      reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    DCREAMENT       reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    NOT             reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    LPAR            reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    INPUT           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    USE             reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    WHILE           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    DO              reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    FOR             reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    SWITCH          reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    IF              reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    IDENTIFIER      reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    INTEGER         reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    FLOAT           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    HEXADECIMAL     reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    OCTAL           reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    BINARY          reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    EXPONANTIAL     reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    STRING          reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    PSEUDO_STRING   reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    SUB             reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    $end            reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)
    BLOCK_END       reduce using rule 40 (while_statement -> WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement .)


state 293

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR . SEMICOLON

    SEMICOLON       shift and go to state 306


state 294

    (60) cases -> case_block M_QUAD . cases
    (61) cases -> case_block M_QUAD .
    (60) cases -> . case_block M_QUAD cases
    (61) cases -> . case_block M_QUAD
    (62) cases -> . ELSE block M_QUAD
    (63) case_block -> . CASE switch_expression M_switch block

    BLOCK_END       reduce using rule 61 (cases -> case_block M_QUAD .)
    ELSE            shift and go to state 277
    CASE            shift and go to state 278

    case_block                     shift and go to state 275
    cases                          shift and go to state 307

state 295

    (59) switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .

    FOREACH         reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    MY              reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    SCALAR_VARIABLE reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    ARRAY_VARIABLE  reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    HASH_VARIABLE   reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    BREAK           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    CONTINUE        reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    PRINT           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    RETURN          reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    DIE             reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    CHOMP           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    MINUS           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    INCREAMENT      reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    DCREAMENT       reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    NOT             reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    LPAR            reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    INPUT           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    USE             reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    WHILE           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    DO              reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    FOR             reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    SWITCH          reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    IF              reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    IDENTIFIER      reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    INTEGER         reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    FLOAT           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    HEXADECIMAL     reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    OCTAL           reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    BINARY          reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    EXPONANTIAL     reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    STRING          reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    PSEUDO_STRING   reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    SUB             reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    $end            reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    BLOCK_END       reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)
    ELSE            reduce using rule 59 (switch_statement -> SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END .)


state 296

    (62) cases -> ELSE block . M_QUAD
    (145) M_QUAD -> . epsilon
    (147) epsilon -> .

    BLOCK_END       reduce using rule 147 (epsilon -> .)

    epsilon                        shift and go to state 63
    M_QUAD                         shift and go to state 308

state 297

    (63) case_block -> CASE switch_expression . M_switch block
    (65) M_switch -> . epsilon
    (147) epsilon -> .

    BLOCK_BEGIN     reduce using rule 147 (epsilon -> .)

    M_switch                       shift and go to state 309
    epsilon                        shift and go to state 310

state 298

    (64) switch_expression -> expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    BLOCK_BEGIN     reduce using rule 64 (switch_expression -> expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 299

    (39) M_else -> epsilon .

    SEMICOLON       reduce using rule 39 (M_else -> epsilon .)
    BLOCK_BEGIN     reduce using rule 39 (M_else -> epsilon .)
    FOREACH         reduce using rule 39 (M_else -> epsilon .)
    MY              reduce using rule 39 (M_else -> epsilon .)
    SCALAR_VARIABLE reduce using rule 39 (M_else -> epsilon .)
    ARRAY_VARIABLE  reduce using rule 39 (M_else -> epsilon .)
    HASH_VARIABLE   reduce using rule 39 (M_else -> epsilon .)
    BREAK           reduce using rule 39 (M_else -> epsilon .)
    CONTINUE        reduce using rule 39 (M_else -> epsilon .)
    PRINT           reduce using rule 39 (M_else -> epsilon .)
    RETURN          reduce using rule 39 (M_else -> epsilon .)
    DIE             reduce using rule 39 (M_else -> epsilon .)
    CHOMP           reduce using rule 39 (M_else -> epsilon .)
    MINUS           reduce using rule 39 (M_else -> epsilon .)
    INCREAMENT      reduce using rule 39 (M_else -> epsilon .)
    DCREAMENT       reduce using rule 39 (M_else -> epsilon .)
    NOT             reduce using rule 39 (M_else -> epsilon .)
    LPAR            reduce using rule 39 (M_else -> epsilon .)
    INPUT           reduce using rule 39 (M_else -> epsilon .)
    USE             reduce using rule 39 (M_else -> epsilon .)
    WHILE           reduce using rule 39 (M_else -> epsilon .)
    DO              reduce using rule 39 (M_else -> epsilon .)
    FOR             reduce using rule 39 (M_else -> epsilon .)
    SWITCH          reduce using rule 39 (M_else -> epsilon .)
    IF              reduce using rule 39 (M_else -> epsilon .)
    IDENTIFIER      reduce using rule 39 (M_else -> epsilon .)
    INTEGER         reduce using rule 39 (M_else -> epsilon .)
    FLOAT           reduce using rule 39 (M_else -> epsilon .)
    HEXADECIMAL     reduce using rule 39 (M_else -> epsilon .)
    OCTAL           reduce using rule 39 (M_else -> epsilon .)
    BINARY          reduce using rule 39 (M_else -> epsilon .)
    EXPONANTIAL     reduce using rule 39 (M_else -> epsilon .)
    STRING          reduce using rule 39 (M_else -> epsilon .)
    PSEUDO_STRING   reduce using rule 39 (M_else -> epsilon .)


state 300

    (34) ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else . block_or_statement
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 254
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 311
    die                            shift and go to state 12
    chomp                          shift and go to state 45
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 301

    (120) expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

  ! shift/reduce conflict for INCREAMENT resolved as shift
  ! shift/reduce conflict for DCREAMENT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for EXPONENT resolved as shift
  ! shift/reduce conflict for Q_MARK resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN resolved as shift
  ! shift/reduce conflict for OP_GREATER_THAN_E resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN resolved as shift
  ! shift/reduce conflict for OP_LESS_THAN_E resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for STRING_CMP resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMICOLON       reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .)
    RPAR            reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .)
    COMMA           reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .)
    COLON           reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .)
    BLOCK_BEGIN     reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .)
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132

  ! INCREAMENT      [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! DCREAMENT       [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! PLUS            [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! MINUS           [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! MULTIPLY        [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! DIVIDE          [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! MODULUS         [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! EXPONENT        [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! Q_MARK          [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! OP_GREATER_THAN [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! OP_GREATER_THAN_E [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! OP_LESS_THAN    [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! OP_LESS_THAN_E  [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! EQUAL           [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! NOT_EQUAL       [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! STRING_CMP      [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! AND             [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]
  ! OR              [ reduce using rule 120 (expression -> expression Q_MARK M_QMARK expression COLON M_COLON expression .) ]


state 302

    (44) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression . RPAR block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression . RPAR SEMICOLON
    (111) expression -> expression . INCREAMENT
    (113) expression -> expression . DCREAMENT
    (114) expression -> expression . PLUS expression
    (115) expression -> expression . MINUS expression
    (116) expression -> expression . MULTIPLY expression
    (117) expression -> expression . DIVIDE expression
    (118) expression -> expression . MODULUS expression
    (119) expression -> expression . EXPONENT expression
    (120) expression -> expression . Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> expression . OP_GREATER_THAN expression
    (124) expression -> expression . OP_GREATER_THAN_E expression
    (125) expression -> expression . OP_LESS_THAN expression
    (126) expression -> expression . OP_LESS_THAN_E expression
    (127) expression -> expression . EQUAL expression
    (128) expression -> expression . NOT_EQUAL expression
    (129) expression -> expression . STRING_CMP expression
    (130) expression -> expression . AND expression
    (131) expression -> expression . OR expression

    RPAR            shift and go to state 312
    INCREAMENT      shift and go to state 122
    DCREAMENT       shift and go to state 123
    PLUS            shift and go to state 125
    MINUS           shift and go to state 119
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 126
    MODULUS         shift and go to state 128
    EXPONENT        shift and go to state 121
    Q_MARK          shift and go to state 118
    OP_GREATER_THAN shift and go to state 120
    OP_GREATER_THAN_E shift and go to state 114
    OP_LESS_THAN    shift and go to state 115
    OP_LESS_THAN_E  shift and go to state 130
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 127
    STRING_CMP      shift and go to state 124
    AND             shift and go to state 129
    OR              shift and go to state 132


state 303

    (87) hashList -> expression COMMA expression COMMA hashList .

    RPAR            reduce using rule 87 (hashList -> expression COMMA expression COMMA hashList .)


state 304

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR . SEMICOLON

    SEMICOLON       shift and go to state 313


state 305

    (43) do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch . SEMICOLON

    SEMICOLON       shift and go to state 314


state 306

    (80) assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .

    ELSE            reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FOREACH         reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    MY              reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    HASH_VARIABLE   reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BREAK           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    CONTINUE        reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    PRINT           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    RETURN          reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DIE             reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    CHOMP           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    MINUS           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INCREAMENT      reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DCREAMENT       reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    NOT             reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    LPAR            reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INPUT           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    USE             reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    WHILE           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DO              reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FOR             reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SWITCH          reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    IF              reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    IDENTIFIER      reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INTEGER         reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FLOAT           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    HEXADECIMAL     reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    OCTAL           reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BINARY          reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    EXPONANTIAL     reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    STRING          reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    PSEUDO_STRING   reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SUB             reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    $end            reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BLOCK_END       reduce using rule 80 (assignment -> ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)


state 307

    (60) cases -> case_block M_QUAD cases .

    BLOCK_END       reduce using rule 60 (cases -> case_block M_QUAD cases .)


state 308

    (62) cases -> ELSE block M_QUAD .

    BLOCK_END       reduce using rule 62 (cases -> ELSE block M_QUAD .)


state 309

    (63) case_block -> CASE switch_expression M_switch . block
    (7) block -> . BLOCK_BEGIN statements BLOCK_END

    BLOCK_BEGIN     shift and go to state 152

    block                          shift and go to state 315

state 310

    (65) M_switch -> epsilon .

    BLOCK_BEGIN     reduce using rule 65 (M_switch -> epsilon .)


state 311

    (34) ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .

    ELSE            reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    FOREACH         reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    MY              reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    SCALAR_VARIABLE reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    HASH_VARIABLE   reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    BREAK           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    CONTINUE        reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    PRINT           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    RETURN          reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    DIE             reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    CHOMP           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    MINUS           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    INCREAMENT      reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    DCREAMENT       reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    NOT             reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    LPAR            reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    INPUT           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    USE             reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    WHILE           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    DO              reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    FOR             reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    SWITCH          reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    IF              reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    IDENTIFIER      reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    INTEGER         reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    FLOAT           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    HEXADECIMAL     reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    OCTAL           reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    BINARY          reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    EXPONANTIAL     reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    STRING          reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    PSEUDO_STRING   reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    SUB             reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    $end            reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)
    BLOCK_END       reduce using rule 34 (ifelse_statement -> IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement .)


state 312

    (44) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR . block_or_statement
    (45) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR . SEMICOLON
    (29) block_or_statement -> . block
    (30) block_or_statement -> . statement
    (31) block_or_statement -> . SEMICOLON
    (7) block -> . BLOCK_BEGIN statements BLOCK_END
    (10) statement -> . assignment M_QUAD
    (11) statement -> . declaration M_QUAD
    (12) statement -> . function_call M_QUAD
    (13) statement -> . break M_QUAD
    (14) statement -> . continue M_QUAD
    (15) statement -> . print M_QUAD
    (16) statement -> . return M_QUAD
    (17) statement -> . die M_QUAD
    (18) statement -> . chomp M_QUAD
    (19) statement -> . expression M_QUAD SEMICOLON
    (20) statement -> . use M_QUAD
    (21) statement -> . while_statement M_QUAD
    (22) statement -> . do_while_statement M_QUAD
    (23) statement -> . for_statement M_QUAD
    (24) statement -> . switch_statement M_QUAD
    (25) statement -> . if_statement M_QUAD
    (26) statement -> . ifelse_statement M_QUAD
    (55) statement -> . FOREACH SCALAR_VARIABLE LPAR ARRAY_VARIABLE RPAR block_or_statement
    (56) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR block_or_statement
    (57) statement -> . FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON
    (58) statement -> . FOREACH LPAR INTEGER DOUBLE_DOT INTEGER RPAR block_or_statement
    (66) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (67) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (68) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (69) assignment -> . MY ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (70) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (71) assignment -> . MY HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (72) assignment -> . MY SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (73) assignment -> . SCALAR_VARIABLE ASSIGNMENT expression SEMICOLON
    (74) assignment -> . SCALAR_VARIABLE ASSIGNMENT function_call SEMICOLON
    (75) assignment -> . SCALAR_VARIABLE SIMULT_ASSIGNMENT function_call SEMICOLON
    (76) assignment -> . ARRAY_VARIABLE ASSIGNMENT array SEMICOLON
    (77) assignment -> . HASH_VARIABLE ASSIGNMENT LPAR hashList RPAR SEMICOLON
    (78) assignment -> . ARRAY_VARIABLE ASSIGNMENT KEYS HASH_VARIABLE SEMICOLON
    (79) assignment -> . ARRAY_VARIABLE ASSIGNMENT VALUES HASH_VARIABLE SEMICOLON
    (80) assignment -> . ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON
    (89) declaration -> . MY SCALAR_VARIABLE SEMICOLON
    (90) declaration -> . MY ARRAY_VARIABLE SEMICOLON
    (91) function_call -> . function_name LPAR argumentList RPAR SEMICOLON
    (98) break -> . BREAK SEMICOLON
    (99) continue -> . CONTINUE SEMICOLON
    (106) print -> . PRINT printlist SEMICOLON
    (97) return -> . RETURN expression SEMICOLON
    (107) die -> . DIE printlist SEMICOLON
    (100) chomp -> . CHOMP expression SEMICOLON
    (109) expression -> . MINUS expression
    (110) expression -> . INCREAMENT expression
    (111) expression -> . expression INCREAMENT
    (112) expression -> . DCREAMENT expression
    (113) expression -> . expression DCREAMENT
    (114) expression -> . expression PLUS expression
    (115) expression -> . expression MINUS expression
    (116) expression -> . expression MULTIPLY expression
    (117) expression -> . expression DIVIDE expression
    (118) expression -> . expression MODULUS expression
    (119) expression -> . expression EXPONENT expression
    (120) expression -> . expression Q_MARK M_QMARK expression COLON M_COLON expression
    (123) expression -> . expression OP_GREATER_THAN expression
    (124) expression -> . expression OP_GREATER_THAN_E expression
    (125) expression -> . expression OP_LESS_THAN expression
    (126) expression -> . expression OP_LESS_THAN_E expression
    (127) expression -> . expression EQUAL expression
    (128) expression -> . expression NOT_EQUAL expression
    (129) expression -> . expression STRING_CMP expression
    (130) expression -> . expression AND expression
    (131) expression -> . expression OR expression
    (132) expression -> . NOT expression
    (133) expression -> . LPAR expression RPAR
    (134) expression -> . SCALAR_VARIABLE
    (135) expression -> . constant
    (144) expression -> . INPUT
    (27) use -> . USE STRICT SEMICOLON
    (28) use -> . USE WARNINGS SEMICOLON
    (40) while_statement -> . WHILE M_QUAD LPAR expression RPAR M_whileBranch block_or_statement
    (43) do_while_statement -> . DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON
    (44) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement
    (45) for_statement -> . FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON
    (59) switch_statement -> . SWITCH LPAR SCALAR_VARIABLE RPAR BLOCK_BEGIN cases BLOCK_END
    (32) if_statement -> . IF expression RPAR M_if block_or_statement
    (34) ifelse_statement -> . IF expression RPAR M_if block_or_statement ELSE M_else block_or_statement
    (92) function_name -> . IDENTIFIER
    (136) constant -> . INTEGER
    (137) constant -> . FLOAT
    (138) constant -> . HEXADECIMAL
    (139) constant -> . OCTAL
    (140) constant -> . BINARY
    (141) constant -> . EXPONANTIAL
    (142) constant -> . STRING
    (143) constant -> . PSEUDO_STRING

    SEMICOLON       shift and go to state 316
    BLOCK_BEGIN     shift and go to state 152
    FOREACH         shift and go to state 9
    MY              shift and go to state 31
    SCALAR_VARIABLE shift and go to state 27
    ARRAY_VARIABLE  shift and go to state 37
    HASH_VARIABLE   shift and go to state 25
    BREAK           shift and go to state 49
    CONTINUE        shift and go to state 29
    PRINT           shift and go to state 15
    RETURN          shift and go to state 13
    DIE             shift and go to state 52
    CHOMP           shift and go to state 48
    MINUS           shift and go to state 2
    INCREAMENT      shift and go to state 39
    DCREAMENT       shift and go to state 4
    NOT             shift and go to state 30
    LPAR            shift and go to state 1
    INPUT           shift and go to state 26
    USE             shift and go to state 50
    WHILE           shift and go to state 36
    DO              shift and go to state 35
    FOR             shift and go to state 24
    SWITCH          shift and go to state 41
    IF              shift and go to state 56
    IDENTIFIER      shift and go to state 43
    INTEGER         shift and go to state 23
    FLOAT           shift and go to state 58
    HEXADECIMAL     shift and go to state 16
    OCTAL           shift and go to state 10
    BINARY          shift and go to state 11
    EXPONANTIAL     shift and go to state 20
    STRING          shift and go to state 54
    PSEUDO_STRING   shift and go to state 28

    function_call                  shift and go to state 14
    constant                       shift and go to state 51
    switch_statement               shift and go to state 17
    ifelse_statement               shift and go to state 19
    use                            shift and go to state 38
    while_statement                shift and go to state 5
    statement                      shift and go to state 255
    print                          shift and go to state 22
    if_statement                   shift and go to state 53
    function_name                  shift and go to state 44
    for_statement                  shift and go to state 6
    return                         shift and go to state 7
    do_while_statement             shift and go to state 18
    assignment                     shift and go to state 55
    break                          shift and go to state 8
    chomp                          shift and go to state 45
    declaration                    shift and go to state 46
    block_or_statement             shift and go to state 317
    die                            shift and go to state 12
    continue                       shift and go to state 21
    expression                     shift and go to state 57
    block                          shift and go to state 253

state 313

    (67) assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .

    ELSE            reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FOREACH         reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    MY              reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    HASH_VARIABLE   reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BREAK           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    CONTINUE        reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    PRINT           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    RETURN          reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DIE             reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    CHOMP           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    MINUS           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INCREAMENT      reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DCREAMENT       reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    NOT             reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    LPAR            reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INPUT           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    USE             reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    WHILE           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    DO              reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FOR             reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SWITCH          reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    IF              reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    IDENTIFIER      reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    INTEGER         reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    FLOAT           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    HEXADECIMAL     reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    OCTAL           reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BINARY          reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    EXPONANTIAL     reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    STRING          reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    PSEUDO_STRING   reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    SUB             reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    $end            reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)
    BLOCK_END       reduce using rule 67 (assignment -> MY ARRAY_VARIABLE ASSIGNMENT LPAR INTEGER DOUBLE_DOT INTEGER RPAR SEMICOLON .)


state 314

    (43) do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .

    FOREACH         reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    MY              reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    HASH_VARIABLE   reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    BREAK           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    CONTINUE        reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    PRINT           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    RETURN          reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    DIE             reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    CHOMP           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    MINUS           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    INCREAMENT      reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    DCREAMENT       reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    NOT             reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    LPAR            reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    INPUT           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    USE             reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    WHILE           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    DO              reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    FOR             reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    SWITCH          reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    IF              reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    IDENTIFIER      reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    INTEGER         reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    FLOAT           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    HEXADECIMAL     reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    OCTAL           reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    BINARY          reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    EXPONANTIAL     reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    STRING          reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    PSEUDO_STRING   reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    BLOCK_END       reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    ELSE            reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    SUB             reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)
    $end            reduce using rule 43 (do_while_statement -> DO M_QUAD block WHILE LPAR expression RPAR M_whileBranch SEMICOLON .)


state 315

    (63) case_block -> CASE switch_expression M_switch block .

    ELSE            reduce using rule 63 (case_block -> CASE switch_expression M_switch block .)
    CASE            reduce using rule 63 (case_block -> CASE switch_expression M_switch block .)
    BLOCK_END       reduce using rule 63 (case_block -> CASE switch_expression M_switch block .)


state 316

    (45) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .
    (31) block_or_statement -> SEMICOLON .

  ! reduce/reduce conflict for ELSE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOREACH resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for MY resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SCALAR_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for ARRAY_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for HASH_VARIABLE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BREAK resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PRINT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DIE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for CHOMP resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INCREAMENT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DCREAMENT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for LPAR resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INPUT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for USE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for DO resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SWITCH resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for INTEGER resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for HEXADECIMAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for OCTAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BINARY resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for EXPONANTIAL resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for PSEUDO_STRING resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for SUB resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 31 (block_or_statement -> SEMICOLON .)
  ! reduce/reduce conflict for BLOCK_END resolved using rule 31 (block_or_statement -> SEMICOLON .)
    ELSE            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOREACH         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MY              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SCALAR_VARIABLE reduce using rule 31 (block_or_statement -> SEMICOLON .)
    ARRAY_VARIABLE  reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HASH_VARIABLE   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BREAK           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PRINT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    RETURN          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DIE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    CHOMP           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    MINUS           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INCREAMENT      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DCREAMENT       reduce using rule 31 (block_or_statement -> SEMICOLON .)
    NOT             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    LPAR            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INPUT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    USE             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    WHILE           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    DO              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FOR             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SWITCH          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IF              reduce using rule 31 (block_or_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 31 (block_or_statement -> SEMICOLON .)
    INTEGER         reduce using rule 31 (block_or_statement -> SEMICOLON .)
    FLOAT           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    HEXADECIMAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    OCTAL           reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BINARY          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    EXPONANTIAL     reduce using rule 31 (block_or_statement -> SEMICOLON .)
    STRING          reduce using rule 31 (block_or_statement -> SEMICOLON .)
    PSEUDO_STRING   reduce using rule 31 (block_or_statement -> SEMICOLON .)
    SUB             reduce using rule 31 (block_or_statement -> SEMICOLON .)
    $end            reduce using rule 31 (block_or_statement -> SEMICOLON .)
    BLOCK_END       reduce using rule 31 (block_or_statement -> SEMICOLON .)

  ! ELSE            [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! FOREACH         [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! MY              [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! SCALAR_VARIABLE [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! ARRAY_VARIABLE  [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! HASH_VARIABLE   [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! BREAK           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! CONTINUE        [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! PRINT           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! RETURN          [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! DIE             [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! CHOMP           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! MINUS           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! INCREAMENT      [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! DCREAMENT       [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! NOT             [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! LPAR            [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! INPUT           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! USE             [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! WHILE           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! DO              [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! FOR             [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! SWITCH          [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! IF              [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! IDENTIFIER      [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! INTEGER         [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! HEXADECIMAL     [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! OCTAL           [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! BINARY          [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! EXPONANTIAL     [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! STRING          [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! PSEUDO_STRING   [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! SUB             [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! $end            [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]
  ! BLOCK_END       [ reduce using rule 45 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON .) ]


state 317

    (44) for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .

    ELSE            reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    FOREACH         reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    MY              reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    SCALAR_VARIABLE reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    ARRAY_VARIABLE  reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    HASH_VARIABLE   reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    BREAK           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    CONTINUE        reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    PRINT           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    RETURN          reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    DIE             reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    CHOMP           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    MINUS           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    INCREAMENT      reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    DCREAMENT       reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    NOT             reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    LPAR            reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    INPUT           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    USE             reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    WHILE           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    DO              reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    FOR             reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    SWITCH          reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    IF              reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    IDENTIFIER      reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    INTEGER         reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    FLOAT           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    HEXADECIMAL     reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    OCTAL           reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    BINARY          reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    EXPONANTIAL     reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    STRING          reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    PSEUDO_STRING   reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    SUB             reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    $end            reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)
    BLOCK_END       reduce using rule 44 (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR block_or_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FOREACH in state 42 resolved as shift
WARNING: shift/reduce conflict for MY in state 42 resolved as shift
WARNING: shift/reduce conflict for SCALAR_VARIABLE in state 42 resolved as shift
WARNING: shift/reduce conflict for ARRAY_VARIABLE in state 42 resolved as shift
WARNING: shift/reduce conflict for HASH_VARIABLE in state 42 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 42 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 42 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 42 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 42 resolved as shift
WARNING: shift/reduce conflict for DIE in state 42 resolved as shift
WARNING: shift/reduce conflict for CHOMP in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for INCREAMENT in state 42 resolved as shift
WARNING: shift/reduce conflict for DCREAMENT in state 42 resolved as shift
WARNING: shift/reduce conflict for NOT in state 42 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 42 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 42 resolved as shift
WARNING: shift/reduce conflict for USE in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for DO in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 42 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 42 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 42 resolved as shift
WARNING: shift/reduce conflict for HEXADECIMAL in state 42 resolved as shift
WARNING: shift/reduce conflict for OCTAL in state 42 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 42 resolved as shift
WARNING: shift/reduce conflict for EXPONANTIAL in state 42 resolved as shift
WARNING: shift/reduce conflict for STRING in state 42 resolved as shift
WARNING: shift/reduce conflict for PSEUDO_STRING in state 42 resolved as shift
WARNING: shift/reduce conflict for INCREAMENT in state 62 resolved as shift
WARNING: shift/reduce conflict for DCREAMENT in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 62 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 62 resolved as shift
WARNING: shift/reduce conflict for Q_MARK in state 62 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN_E in state 62 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN_E in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for STRING_CMP in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for INCREAMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for DCREAMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 98 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 98 resolved as shift
WARNING: shift/reduce conflict for Q_MARK in state 98 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN_E in state 98 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN in state 98 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN_E in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for STRING_CMP in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for INCREAMENT in state 178 resolved as shift
WARNING: shift/reduce conflict for DCREAMENT in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 178 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 178 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 178 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 178 resolved as shift
WARNING: shift/reduce conflict for Q_MARK in state 178 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN in state 178 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN_E in state 178 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN in state 178 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN_E in state 178 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 178 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 178 resolved as shift
WARNING: shift/reduce conflict for STRING_CMP in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 256 resolved as shift
WARNING: shift/reduce conflict for INCREAMENT in state 301 resolved as shift
WARNING: shift/reduce conflict for DCREAMENT in state 301 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 301 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 301 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 301 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 301 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 301 resolved as shift
WARNING: shift/reduce conflict for EXPONENT in state 301 resolved as shift
WARNING: shift/reduce conflict for Q_MARK in state 301 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN in state 301 resolved as shift
WARNING: shift/reduce conflict for OP_GREATER_THAN_E in state 301 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN in state 301 resolved as shift
WARNING: shift/reduce conflict for OP_LESS_THAN_E in state 301 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 301 resolved as shift
WARNING: shift/reduce conflict for STRING_CMP in state 301 resolved as shift
WARNING: shift/reduce conflict for AND in state 301 resolved as shift
WARNING: shift/reduce conflict for OR in state 301 resolved as shift
WARNING: reduce/reduce conflict in state 284 resolved using rule (block_or_statement -> SEMICOLON)
WARNING: rejected rule (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON) in state 284
WARNING: reduce/reduce conflict in state 316 resolved using rule (block_or_statement -> SEMICOLON)
WARNING: rejected rule (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON) in state 316
WARNING: Rule (statement -> FOREACH SCALAR_VARIABLE LPAR keys_or_values HASH_VARIABLE RPAR SEMICOLON) is never reduced
WARNING: Rule (for_statement -> FOR LPAR assignment M_QUAD expression SEMICOLON M_for expression RPAR SEMICOLON) is never reduced
